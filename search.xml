<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux基础命令]]></title>
    <url>%2F2018%2F05%2F22%2Flinux%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[Linux系统简介linux内核及发行版本 Linux内核版本 内核(kernel)系统心脏，终端–&gt;系统调用—&gt;硬件,设备和应用程序的抽象层。内核又分为稳定版和开发版:稳定版：工业强度 广泛应用部署，新版相对于旧版只是修正bug或加入驱动程序开发版：由于用于实验各种解决方案，所以变化很快. Linux发行版本 （也叫GNU/linux发行版本）通常包括桌面环境、办公套件、media、dbUbuntu、Redhat、Fedora、openSUSE、Debian、centos、arch。。 命令查阅命令帮助信息 command –helpman command 空格 下一页 enter 下一行 b 上一屏 f 下一屏 q 退出 /word 搜索 目录相关命令 Linux文件或目录名称最长256个字符.开头为隐藏的文件 -a显示 touch .test.txt 创建隐藏文本.当前目录..上一级目录 ls ls list缩写，相当于dos下的dir 蓝色文件夹 白色文件 ls -a 查看所有ls .txt 代表任意个字符？ ls te?t.txt ？只能代表一个字符[]匹配[]中的任意一个 ls [twqs]st.txt[abc]匹配abc中的任意一个[a-f]匹配a-f中的任意一个 ls [1-3]st.txt cdchange directory 更改目录 cd 当前用户的家目录 /home/当前用户cd ~ 同上cd .当前目录cd .. 切换上级目录cd - 最近两个工作目录来回切换 绝对路径：以 / 或者~开头，从根目录或家目录开始相对路径：不以/~开头的，相对于当前目录。 文件目录命令touch创建文件或修改文件时间 如果文件不存在，创建一个空白文件。如果文件存在，修改文件最后修改日期 mkdir创建新的目录 mkdir -p /home/jiang/sssd/test 递归创建目录新建目录不能与已有目录或文件同名。 rm删除目录或文件，删除后不能恢复 rm -f 强制删除，不提示rm -r 删文件夹必须加该参数rm *.txt 删除以txt结尾的文件 tree以树状图列出文件目录结构tree -d 只显示目录，不显示文件 cpcp 源文件 目标文件 复制文件或者文件夹(不想改名直接加目标目录即可) cp -i 覆盖文件提示，cp -r 若复制目录下子目录和文件，目标文件必须为一个目录名。 mv移动文件或目录，也可以重命名。 mv 源文件 目标文件 mv -i 源文件 目标文件 cat1.查看文件内容、创建文件、合并文件、追加文件。2.cat会一次显示所有内容，适合查看文本较少的文件。 cat -b 输出非空编号 等价linux中的nlcat -n 输出所有编号cat -T 将tab显示为^lcat &gt; test.txt &lt;&lt; EOF 创建test.txtcat &gt;&gt; linuxsir.txt &lt;&lt; EOF 向test.txt追加内容 more more用于分屏显示文件内容，每次只显示一页内容 -l 忽略ctrl + l 换页字符 -p 顶部清屏然后显示，相当于-c -s 将连续的空行显示为一行 -u 将文件中的下划线去掉 +num 从第num行开始显示 -num 每屏显示num行 空格 下一屏 回车 下一行 b 上一屏 f 下一屏 q 退出 /word 查找字符串head tail head是显示一个文件的前多少行，head -n num 文件名 tail是查看文件最后的多少行，tail -n num 文件名grep文本搜索工具,可以匹配正则。 grep sss test.txt grep -n ss test.txt 显示行号 grep -v ss test.txt 反选包含ss的 grep -i ss test.txt 不区分大小写 grep -i “hello ss” test.txt 高亮显示字符串常见的正则查找 ^ss 搜索以ss开头的行 grep ^ss 1.txt ss$ 搜索以ss结尾的行 grep -n ss$ 1.txtecho echo会在终端显示指定的文字参数，通常配合重定向 将执行结果重定向到一个文件 输出，覆盖原文件内容 追加，追加到文件的末尾 tree &gt; test.txt 管道| 一个命令的输出结果作为另一个命令的输入，左写右读 常配合more分屏太多内容 如 ls -lah | more grep 输出结果中过滤文本，history | grep error 远程管理常用的命令shutdown关机或者重启 shutdown 选项 时间 shutdown 不加参数或选项，默认一分钟后自动关闭 shutdown now 立刻关机 shutdown -r now 立即重启电脑 shutdown 8：30 在8：30自动关机 shutdown -c 取消自动关机 shutdown +10 十分钟后自动关机reboot reboot 直接重启init init 0 关机init 3 切换到多用户init 5 切换到图形界面init 6 重启 ifconfig 查看网卡ip信息，相当于windows下的ipconfig。 网卡相当于sim卡，ip相当于电话号码。 查看ip ifconfig | grep inet sshssh专为远程登陆会话提供的安全协议，防止信息泄露，传输过程中经过压缩，加快传输速度。 ip找到网络上计算机，端口号找到计算机的应用程序，windows下直接是服务。 ssh服务器 22 web服务器 80 https 443 ftp服务器 21 ssh [-p port] user@remoteip -p指定其他端口，remote ip或域名 linux下ssh，windows下xshell或者putty 家目录下.ssh目录会保存ssh的登陆配置信息，第一次会生成 免密登陆，客户端下操作哦 ssh-keygen 生产ssh钥匙，配置公钥，执行后会在.ssh下生成两个id文件ssh-copy-id [-p port] user@remote 上传id_rsa.pub公钥到服务器，服务器加目录下.ssh目录下多个文件， 非对称加密算法，公钥加密的数据，需要私钥解密，传输数据时，客户端私钥加密，服务器端公钥解密 id_rsa.pub公钥文件，id_rsa私钥文件 scp远程文件拷贝,注意指定端口时-P 一定大写 scp -P port 1.py user@remote:/home/jiang/desktop/1.test 将本地文件复制到远程目录下 scp user@remote:/home/jiang/1.py 1.py 远程复制到本地 scp -r aaa user@remote:/home/jiang 复制目录，本地到远程 scp -r user @remote:/home/jiang aaa配置别名，ssh test直接登陆客户端.ssh目录下，创建config文件追加下面内容 Host test HostName 192.168.1.100 User jiang port 22保存即可，ssh test就能登陆了，scp同样适用用户权限相关命令 用户，组，其他用户，read 4 write 2 excute 1 硬链接数：有多少种方式访问当前的目录或文件 chmod +/- rwx 文件或目录名 或者chmod 777 文件或目录 组管理的命令都需要在root下执行 groupadd 组名 添加组 groupdel 组名 删除组 cat /etc/group 查看组 chgrp 组名 文件/目录名 修改文件/目录所属组eg: mkdir test 创建目录，所属组为jiang groupadd dev 创建一个组 cat /etc/group 查看组 sudo chgrp -R dev test 更改test目录组为dev 用户命令的管理创建用户，然后创建密码 useradd -m -g 组名 用户名 -m创建家目录，-g指定用户组，不加-g自动创建和用户名一样的组 sudo useradd -m -g test jiang test组创建用户jiang passwd 用户名 root权限下添加用户后需要设置密码， userdel -r 用户名删除用户，-r参数删除用户的家目录 cat /etc/passwd | grep 用户名 查看用户信息查看用户信息 id [用户名] 查看用户的UID和GID id jiang jiang:x:1000:1001::/home/jiang 1000用户id 1001组id who 查看当前所有登陆的用户列表 whoami 查看当前登陆用户的账户名usermod usermod 设置用户的主组/附加组和登陆shell 主组：一般新建用户时设定，在etc/passwd的第四列GID对应的组附加组:在etc/group中最后一列表示改组的用户列表 #修改用户的主组（passwd中的GID） usermod -g 组 用户名 #修改用户的附加组 usermod -G 组 用户名 #修改用户的登陆shell usermod -s /bin/bash 用户名which which ls /bin/ls which passwd /usr/bin/passwd /bin 二进制执行文件目录，主要用于具体应用 /sbin 系统管理员专用的二进制代码存放目录，用于系统管理 /usr/bin 后期用户自己安装的一些软件 /usr/sbin 超级用户的一些管理程序su su - 用户名 切换用户并到其家目录和shell环境 su 用户名 切换用户，还是原来的shell环境 exit 退出当前登陆用户，返回到上一个用户环境。修改文件权限 chown 修改拥有着 chgrp 修改用户组 chmod 修改用户权限 chown 用户名 文件/目录 chgrp -R 组名 文件/目录 递归修改所有文件权限 chmod +/- wrx 文件/目录 777 chmod -R 640 文件夹 修改文件夹下所有文件的权限系统相关命令date root下 date -s “2018-05-22 18:08:05”修改时间 当前日期 date +”%Y%m%d” 当前日期格式 date +”%Y-%m-%d” 注意：1.date后面必须有空格，date+”%Y%m%d”不可以2.加号后面不可以有空格！ date + “%Y%m%d”不可以3.加号后面的这个 单引号双引号或者都不加都可以 获取昨日时间 date -d “-1 day” 或者 date -d “1 day ago” 获取昨日日期 date -d “-1 day” +%Y%m%d 获取上个月、去年的日期、时间 date -d “-1 month” +%Y%m%dcal 默认查看月日历，-y查看一年的 cal 5 2018 查看固定年月的 cal 2018 显示2018年的df df -h 显示磁盘剩余空间df -a 查看全部文件系统df -t ext3 只显示ext3格式的fsdf -T 显示每个文件的系统类型 du du -h [目录名] 显示目录下文件大小du -s 显示总和大小du -ah 文件和目录都显示 进程相关 ps aux 查看进程详细情况 all u详细 x没有控制终端的进程 ps -ef | grep tom 查看tomcat进程 top 动态显示运行中的程序并排序 kill [-9] pid 终止程序，-9表示强行终止其他命令find查找指定目录下符合条件的文件 find [路径] -name “.py” 查找指定路径下扩展名为py的文件 如果没加路径，表示在当前文件夹下查找find -name “123*” lnlinux中文件名 和文件的数据是分开保存的，源文件删除后，软连接失效，硬链接有效。 软连接 ln -s 源文件 链接文件名 类似于快捷方式，没-s是硬链接，绝对路径，相对路径被移动目录后会爆错找不到。 硬链接 ln 源文件 链接文件名查看 ln -l 压缩解压tar 压缩 tar cvf 文件名.tar 被打包的文件或路径 解压 tar zxf 打包文件.tar c 创建 x 解开 v 过程 f指定文件名，f后一定是tar文件，需放最后gzip tar只负责打包，gzip负责压缩 压缩文件 tar -zcvf filename.tar.gz 被压缩的文件或路径 解压文件 tar -zxvf 打包文件.tar.gz 解压缩到指定路径 tar -zxvf 打包文件.tar.gz -C 路径注意-C 路径时，路径必须已经存在bzip2 tar打包，bzip2压缩 格式为XXXx.tar.bz2 d 压缩 tar -jcvf XXx.tar.bz2 被压缩的文件或路径 解压缩 tar -jxvf 打包文件.tar.bz2 解压缩到指定路径,加-C tar -jxvf 打包文件.tar.gz -C 路径]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell(一)流程控制、函数]]></title>
    <url>%2F2018%2F05%2F21%2Fshell(%E4%B8%80)%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E3%80%81%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[shell流程控制、函数1.if else elif#!/bin/bash a=10 b=20 if [ $a == $b ] then echo &quot;true&quot; fi if [ $a == $b] then echo &quot;true&quot; else echo &quot;false&quot; fi if [ $a == $b ] then echo &quot;a=b&quot; elif [ $a -gt $b] then echo &quot;a&gt;b&quot; elif [ $a -lt $b ] then echo &quot;a&lt;b&quot; else echo &quot;none is right&quot; fi 2.for#!/bin/bash for i in {1,5,85} do echo $i done for i in 5 6 7 43 do echo $i done for file in $HONE/.bash* do echo $file done 3.while#!/bin/bash int=1 while(($int&lt;=8)) do echo $int let &quot;int++&quot; done while [$int -lt 5] do int=`expr $int +1` echo $int done 无限循环while : do command done 4.until#!/bin/bash a=0 until [ ! $a -lt 10 ] do echo $a a=`expr $a+1` done 5.case#!/bin/bash echo &quot;输入1到4之间的数&quot; echo &quot;你输入的数字为&quot; read num case $num in 1) echo &quot;你输入的是1&quot; ;; 2) echo &quot;你输入的是2&quot; ;; 3) echo &quot;你输入的是3&quot; ;; 4) echo &quot;你输入的是4&quot; ;; *) echo &quot;你输入的不对&quot; ;; esac 6.跳出循环break终止循环#!/bin/bash while: do echo -n &quot;输入1到5之间的数字&quot; read num case $num in 1|2|3|4|5) echo &quot;你输入的数字是$num&quot; ;; *) echo &quot;你输入的不是1-5之间的&quot; break ;; esac done continue 跳出本次循环上述代码 break换成continue 不会结束 7.函数 定义: 可以funtion fun_name(){}也可以 fun(){}参数返回，加return返回，不加以最后一条命令运行结果作为返回值。 #!/bin/bash demo(){ echo &quot;test函数&quot; } demo #调用函数 return函数 #!/bin/bash funSum(){ echo &quot;输入第一个数字：&quot; read num1 echo &quot;输入第二个数字&quot; read num2 return $(($num1+$num2)) # return `expr $num1 + $num2` } funSum echo &quot;输入两个数字和为$?&quot; 函数参数 调用函数时可以向其传递参数，$n获取参数值$1第一个，$2第二个，$10不能获取第十个，用${10},当n&gt;=10时，需要用${n}来获取参数 #!/bin/bash fun(){ echo &quot;第一个参数 $1&quot; echo &quot;第二个参数 $2&quot; echo &quot;第十个参数 $10&quot; echo &quot;第十个参数 ${10}&quot; echo &quot;参数总数为$#&quot; echo &quot;一个字符串输出所有参数$*&quot; } fun 1 2 34 123 21 32 31 12 1 1 1 21 $#参数个数 $*单个字符串显示所有参数 $@使用时加引号，返回每个参数$? 函数返回值 8.调用另一个脚本#!/bin/bash . ./fun.sh or source ./fun.sh]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell(一)运算符、test]]></title>
    <url>%2F2018%2F05%2F20%2Fshell(%E4%B8%80)%E8%BF%90%E7%AE%97%E7%AC%A6_test%2F</url>
    <content type="text"><![CDATA[shell运算符、test运算符包含算数运算符、关系运算符、布尔运算符、字符串运算符、文件测试运算符原生bash不支持数学运算，可通过awk和expr #!/bin/bash val=`expr 2 + 2` #加好前后必须有空格 否则报错 echo &quot;和为：$val&quot; 1.算数运算符 运算符 说明 例子 + 加 expr $a + $b - 减 expr $a - $b * 乘 expr $a \* $b / 除 expr $a / $b % 取余 expr $a % $b = 赋值 a=$b 把变量b值赋给a == 相等，用于数字，返回true或者false if [$a == $b] != 不等，判断数字，返回true or false if [$a != $b] 注意 乘法*需要转义\,符号前后都要有空格 #!/bin/bash num1=10 num2=20 sum=`expr $num1 + $num2` min=`expr $num1 - $num2` cheng=`expr $num1 \* $num2` chu=`expr $num1 / $num2` yu=`expr $num1 % $num2` if [ $num1 == $num2 ] then echo &quot;num1=num2&quot; fi if[ $num1 != $num2] then echo &quot;num1 != num2&quot; fi 2.关系运算符关系运算符只支持数字，不支持string，除非字符串值是数字 运算符 说明 例子 -eq 是否相等，返回true或false [ $a -eq $b] -ne 是否不相等，返回true或false [ $a -ne $b] -gt 左边是否大于右边，返回true或false [ $a -gt $b] -ge 左边是否大于等于右边，返回true或false [ $a -ge $b] -lt 左边是否小于右边的，返回true或false [ $a -lt $b] -le 左边是否小于等于右边，返回true或false [ $a -le $b] #!/bin/bash a=100 b=200 if [ $a -gt $b ] #换哪个都行 then echo &quot;$a 大于 $b&quot; else echo &quot;$a 小于$b&quot; fi 3.布尔运算符 运算符 说明 举例 -a 与运算，表达式同时为真才是真 [ $a -lt 100 -a $b -le 200 ] -o 或运算，表达式有一个为真为真 [ $a -lt 100 -o $b -le 200] ! 非运算，表达式为真返回false，取反 [ !false ] 值为true #!/bin/bash num1=100 num2=200 if[ $num1 -le 101 -o $num2 -gt 300 ] then echo &quot;嚯嚯嚯嚯嚯嚯&quot; else echo &quot;假的&quot; fi 4.逻辑运算符 运算符 说明 举例 &amp;&amp; 逻辑and [ $a -lt 100 &amp;&amp; $b -le 200 ] &#124;&#124; 逻辑or [ $a -lt 100 -o $b -le 200] #!/bin/bash num1=100 num2=200 if[ $num1 -le 101 &amp;&amp; $num2 -gt 300 ] then echo &quot;嚯嚯嚯嚯嚯嚯&quot; else echo &quot;假的&quot; fi 5.字符串运算符 运算符 说明 例子 = 判断两个字符串是否相等， [ $a = $b ] 相等返回true != 判断两个字符串是否相等， [ $a != $b ] 不相等返回true -z 检测字符串长度是否为0， [ -z $a ] 是0返回true -n 检测字符串长度时候为0，不为0返回true [ -n “$a” ] 不为0返回true str 检测字符串是否为空，空false，不空true [ $a ]不空true a=&quot;asdasd&quot; if [ $a ] #字符串是否为空 then echo &quot;$a : 字符串不为空&quot; else echo &quot;$a : 字符串为空&quot; fi 6.文件测试运算符 运算符 说明 例子 -b file 检测文件是否块设备文件，是返回true [-b $file] 是返回true -e file 检测文件(包含目录)是否存在，是返回true [-e $file ] 存在返回true -f file 检测文件是否为普通文件(不是目录，也不是块文件)，是返回true [-e $file ] 存在返回true -s file 检测文件是否为空，大小是否大于0，不为空返回true [-s $file ]不为空返回true -r file 文件是否可读，是返回true [-w $file ]可读返回true -w file 文件是否可写，是返回true [-w $file ]可写返回true -x file 文件是否可执行，是返回true [-w $file ]可执行返回true -r file 文件是否可读，是返回true [-w $file ]可读返回true file=&quot;/home/jiang/test.sh&quot; if [ -r $file ] then echo &quot;文件可读&quot; else echo &quot;文件不可读&quot; fi test检测条件是否成立数值、字符、文件三个方面 数值测试-eq 等于为真 -ne不等为真 -gt -ge -lt -le num1=100 num2=100 if test $[num1] -eq $[num2] # if [ $num1 -eq $num2 ] then echo &quot;两个数相等&quot; else echo &quot;两个数不等&quot; fi 字符串测试=等于为真 !=不等为真 -z字符串长度为0为真 -n字符串长度不为0为真 num1=&quot;asdasd&quot; num2=&quot;qwerqw&quot; if test $num1 = $num2 then echo &apos;两个字符串相等!&apos; else echo &apos;两个字符串不相等!&apos; fi 文件测试 -e 文件名 存在为真-d 文件名 文件存在且为目录为真-f 文件名 文件存在且为普通文件为真-s 文件名 文件岑仔且至少有一个字符为真-b 文件名 文件存在且为块特殊文件为真-w -r -x 文件名 文件是否为刻度可写可执行为真 cd /bin if test -e ./bash then echo &apos;文件已存在!&apos; else echo &apos;文件不存在!&apos; fi]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell(一)变量_数组_传参_输出]]></title>
    <url>%2F2018%2F05%2F20%2Fshell(%E4%B8%80)%E5%8F%98%E9%87%8F_%E6%95%B0%E7%BB%84_%E4%BC%A0%E5%8F%82_%E8%BE%93%E5%87%BA%2F</url>
    <content type="text"><![CDATA[shell变量、字符串、数组、传参、输入输入1.shell简介 通常我们使用bash (bourne again shell)，因为bash免费而且简单。直接使用在win/Unix/Linux上面，并且可以调用大量系统内部的功能来解释执行程序， 2.shell工作原理 Shell可以被称作是脚本语言，因为它本身是不需要编译的，而是通过解释器解释之后再编译执行，和传统语言相比多了解释的过程所以效率会略差于传统的直接编译的语言。 3.变量第一个脚本vi test.sh创建第一个脚本 #!/bin/bash echo &quot;hello world&quot; cd 该目录下chmod 777 test.sh #给脚本执行权限 +x 也可以./test.sh #执行脚本 命名 英文、数字、下划线，首字符不以数字开头，中间不能有空格，可以下划线_ 不能有标点，不能有关键字。变量名和等号之间不能有空格可以直接=赋值，也可以语句赋值 for file in `ls /dev` do echo $file done 使用变量 定义使用的变量，在变量名前加美元符号$ 即可，可以使用{}识别边界，变量可以重复命名。 num=2 echo &quot;this is $num&quot; echo &quot;this is the $numnd&quot; # numnd 变量不存在 echo &quot;this is the ${num}nd&quot; #识别边界 只读变量 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变, #!bin/bash num=&quot;qweq&quot; readonly num num=&quot;asdd&quot; #重新赋值时会提示变量只读 删除变量 unset可以删除变量，但是不能删除只读变量 unset var_name 变量类型 局部变量：脚本或命令中定义，仅在shell中使用，其他shell程序不能访问局部变量 环境变量：脚本可以定义环境变量，程序运行需要环境变量来保证 shell变量：shell程序设置的特殊变量，一部分是环境变量，一部分是局部变量，变量保证了shell的正常运行 ##4.字符串string字符串可以用单引号，也可以用双引号，也可以不用引号。 ###单引号 str=’hello world’ 单引号原样输出，变量无效，单引中不能出现单引（转义无效） ###双引号 双引中可以有变量，可以有转义字符 a=&apos;qq&apos; str=&quot;hello \&quot;$a\&quot; !&quot; str1=&quot;hello $a&quot; echo str # hello &quot;qq&quot; echo str1 # hello qq 获取字符串长度echo ${#string} 查找字符串str=&quot;hello world jiang&quot; echo `expr index &quot;$str&quot; or` #必须有&quot;&quot; 否则报错 5.数组bash只支持一维数组，下标0开始，获取数组元素利用下标。 ###定义数组 array_name=(val0 val1 val2 val3) # 没有逗号 或者 array_name=( val0 val1 val2 val3 ) 或者单独定义各个分量，可以不使用连续的下标。下标范围没限制。 array_name[0]=value0 array_name[1]=value1 array_name[n]=valuen 读取数组读取数组一般格式为${arr_name[index]}使用@、*符号获取数组中所有元素 echo ${arr_name[@]} echo ${arr_name{*}} 获取数组长度echo ${#arr[@]} echo ${#arr[*]} echo ${#arr[n]} #获取单个数组元素长度 练习#!/bin/bash arr=(123 45643 7897 3213) for i in ${arr[*]} do echo ${#i} #打印个数 echo ${i} #打印每个元素 done 6.传参$n$0 脚本名 $1 第一个参数 $2 第二个参数 $3第三个参数 #!/bin/bash echo &quot;文件名为：$0&quot; echo &quot;第一个参数为:$1&quot; echo &quot;第二个参数为:$2&quot; ./test.sh start over 文件名为 ./test.sh 第一个参数为：start 第二个参数为：over $# $* $@#!/bin/bash echo &quot;参数个数为：$#&quot; for i in &quot;$*&quot; do echo $i done for i in &quot;$@&quot; do echo $i done 执行下脚本./canshu.sh 1 2 3 参数个数为：3 1 2 3 1 2 3 其他参数 参数 意义 $$ 显示进程ID号 $? 显示命令最后退出状态，0没错误，其他值表示有错误 $@ 所有参数$@为”$1””$2””$3” $* 所有参数$*为”$1 $2 $3..$n” $# 参数长度 7.输出echo打印普通字符串echo &quot;test&quot; echo test # 双引号可以省略 显示转义字符echo &quot;\&quot;test\&quot;&quot; #&quot;test&quot; echo \&quot;test\&quot; #&quot;test&quot; 显示变量#!/bin/bash read name #从键盘中读取变量 echo &quot;$name welcome&quot; 显示换行/不换行echo -e &quot;ok \n&quot; echo -e &quot;ok \c&quot; #-e转义 \c 不换行 echo asdads #和ok在一行 显示结果到指定文件echo &quot;test result&quot; &gt; test.sh 原样输出字符串，不进行转义或者取变量（用单引号）echo &apos;$name&apos; # 输出结果为 $name 显示命令执行结果echo `date` #注意是反引号 8.读取read read 接收输入的参数，参数用空格进行分隔；如果输入的词组个数大于需要的参数个数，则多出的词组将被作为整体为最后一个参数接收。 read first second echo 第一个：$first 第二个：$second 如果超出参数长度./test.sh 1 2 3 4执行结果为 第一个：1 第二个：2 3 4参数说明-p 提示文字-n 字符长度限制，到指定位数自动结束-t 输入限时-s 隐藏输入内容 read -p &quot;请输入密码&quot; -n 6 -t 5 -s pass echo password is $pass 9.输出printfecho自带换行 printf “hello \n”手动加 格式替代符%d %s %c %f 替代符 说明 例子 d 十进制 s 字符串或字符型，否则报错 %-10s 宽度十字符-左对齐 c char字符型或字符 f float浮点，参数是数字型 %-4.2f .2指保留2位小数 其中最后一个参数是 “def”，%c 自动截取字符串的第一个字符作为结果输出。$ printf “%d %s %c\n” 1 “abc” “def” printf &quot;%-10s %-8s %-4s\n&quot; 姓名 性别 体重kg printf &quot;%-10s %-8s %-4.2f\n&quot; asd 男 12.12 printf转义序列\n换行 \r回车 \f 换页 \b后退]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown语法]]></title>
    <url>%2F2018%2F04%2F20%2Fmarkdown%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[标题一级标题二级标题三级标题一级标题二级标题列表无序列表(+-*) 1 2 3 1 2 3 1 2 3 有序列表(数字加.) 列表一 列表二 列表三 列表四（这里注意数字并不对应） 区块引用 不以结婚为目的的恋爱都叫耍流氓 这是毛主席说的 标题 不以结婚为目的的 毛主席说的 前方高能 热爱刺激了 一级引用 二级引用 三级的 四级的 七级的 代码例子 protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); } 分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以 哈哈上标TM 哈哈下标 自动创建链接&#56;&#53;&#x34;&#54;&#53;&#x37;&#56;&#56;&#x40;&#x71;&#x71;&#46;&#x63;&#x6f;&#x6d; 标注一[^5] 标注二[^3] and a definition[^qq]. [^5]: This is a footnote[^3]: A footnote on “label”[^qq]: The definition of a footnote. 强调加粗 加粗斜体 _斜体_加粗+斜体加粗+斜体删除文本 图片和链接图片与链接的语法很像，区别在一个 ! 号。二者格式： 图片：![]() ![图片文本(可忽略)](图片地址) 链接：[]() [链接文本](链接地址) 链接又分为行内式、参考式和自动链接 行内式[blog](http://s85465788.github.io) 参考式[blog][url]该url为链接标记，置于文中任意位置 自动链接：直接用&lt;&gt;括起来&lt;http://www.baidu.com&gt; blog http://www.baidu.com 这是图片： 插入图片带有链接 [][5][5]: http://www.baidu.com 代码 代码块代码分为行内代码块和代码块 行内：这是行内document.getElementById的例子 代码块使用四个空格或1234567``` javascriptvar num = 0;for (var i = 0; i &lt; 5; i++) &#123; num+=i;&#125;console.log(num); 表格对齐格式 居左::---- 居中: :----:或----- 居右: ----: 默认左对齐:- 左对齐-:右对齐:-:居中-表示列的宽度权重，比如如下，–、-，表示第一列的宽度是第二列的俩倍 左标题 中间标题 右标题 居左文本 居中文本 居右测文本 居左文本1 居中文本2 居右文本3 支持css内嵌样式代码 内联样式 公式注：一个$左对齐，两个居中 $$ x \href{why-equal.html}{=} y^2 + 1 $$$ x = {-b \pm \sqrt{b^2-4ac} \over 2a}. $]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[九桥全同步]]></title>
    <url>%2F2018%2F04%2F10%2F%E4%B9%9D%E6%A1%A5%E5%85%A8%E5%90%8C%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[dds用户修改web错误日志mv msg.err msg.err20180412 巡检df -hvshms -p 进程运行状态-m 用户状态-c软件运行时间点目标端只有-p -c日志 web端ds目录下dds_pweb -q 退出dds_pweb -s 打开源端dds_pweb -t 打开目标端 正常关闭：（可以增量同步）关源端ddstop 目标端ddstop开源端ddstart 开目标端ddstart 全同步：关源端ddstop 目标端ddstop源端ddclean 目标端ddclean开源端ddstart 开目标端ddstart map_start(开始全同步)vs（源端实时日志） vt（目标端实时日志） 源端 192.168.1.101目标端 192.168.1.99]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>dds</tag>
      </tags>
  </entry>
</search>
