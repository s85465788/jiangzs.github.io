<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>shell(一)流程控制、函数</title>
      <link href="/2018/05/21/shell(%E4%B8%80)%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E3%80%81%E5%87%BD%E6%95%B0/"/>
      <url>/2018/05/21/shell(%E4%B8%80)%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E3%80%81%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="shell流程控制、函数"><a href="#shell流程控制、函数" class="headerlink" title="shell流程控制、函数"></a>shell流程控制、函数</h1><h2 id="1-if-else-elif"><a href="#1-if-else-elif" class="headerlink" title="1.if else elif"></a>1.if else elif</h2><pre><code>#!/bin/basha=10b=20if [ $a == $b ]then         echo &quot;true&quot;fiif [ $a == $b]then    echo &quot;true&quot;else    echo &quot;false&quot;fiif [ $a == $b ]then    echo &quot;a=b&quot;elif [ $a -gt $b]then    echo &quot;a&gt;b&quot;elif [ $a -lt $b ]then    echo &quot;a&lt;b&quot;else     echo &quot;none is right&quot;fi</code></pre><h2 id="2-for"><a href="#2-for" class="headerlink" title="2.for"></a>2.for</h2><pre><code>#!/bin/bashfor i in {1,5,85}do     echo $idonefor i in 5 6 7 43do     echo $idonefor file in $HONE/.bash*do     echo $filedone</code></pre><h2 id="3-while"><a href="#3-while" class="headerlink" title="3.while"></a>3.while</h2><pre><code>#!/bin/bashint=1while(($int&lt;=8))do    echo $int    let &quot;int++&quot;donewhile [$int -lt 5]do    int=`expr $int +1`    echo $intdone</code></pre><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h3><pre><code>while :do        commanddone</code></pre><h2 id="4-until"><a href="#4-until" class="headerlink" title="4.until"></a>4.until</h2><pre><code>#!/bin/basha=0until [ ! $a -lt 10 ]do    echo $a    a=`expr $a+1`done</code></pre><h2 id="5-case"><a href="#5-case" class="headerlink" title="5.case"></a>5.case</h2><pre><code>#!/bin/bashecho &quot;输入1到4之间的数&quot;echo &quot;你输入的数字为&quot;read numcase $num in     1) echo &quot;你输入的是1&quot;    ;;    2) echo &quot;你输入的是2&quot;    ;;    3) echo &quot;你输入的是3&quot;    ;;    4) echo &quot;你输入的是4&quot;    ;;    *) echo &quot;你输入的不对&quot;    ;; esac</code></pre><h2 id="6-跳出循环"><a href="#6-跳出循环" class="headerlink" title="6.跳出循环"></a>6.跳出循环</h2><h3 id="break终止循环"><a href="#break终止循环" class="headerlink" title="break终止循环"></a>break终止循环</h3><pre><code>#!/bin/bashwhile:do     echo -n &quot;输入1到5之间的数字&quot;    read num    case $num in    1|2|3|4|5) echo &quot;你输入的数字是$num&quot;    ;;    *) echo &quot;你输入的不是1-5之间的&quot;        break    ;;    esacdone</code></pre><h3 id="continue-跳出本次循环"><a href="#continue-跳出本次循环" class="headerlink" title="continue 跳出本次循环"></a>continue 跳出本次循环</h3><pre><code>上述代码 break换成continue 不会结束</code></pre><h2 id="7-函数"><a href="#7-函数" class="headerlink" title="7.函数"></a>7.函数</h2><blockquote><p>定义: 可以funtion fun_name(){}<br>也可以 fun(){}<br>参数返回，加return返回，不加以最后一条命令运行结果作为返回值。</p></blockquote><pre><code>#!/bin/bashdemo(){    echo &quot;test函数&quot;}demo  #调用函数</code></pre><blockquote><p>return函数</p></blockquote><pre><code>#!/bin/bashfunSum(){    echo &quot;输入第一个数字：&quot;    read num1    echo &quot;输入第二个数字&quot;    read num2    return $(($num1+$num2)) # return `expr $num1 + $num2`}funSumecho &quot;输入两个数字和为$?&quot;</code></pre><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><blockquote><p>调用函数时可以向其传递参数，$n获取参数值$1第一个，$2第二个，$10不能获取第十个，用${10},当n&gt;=10时，需要用${n}来获取参数</p></blockquote><pre><code>#!/bin/bashfun(){    echo &quot;第一个参数 $1&quot;    echo &quot;第二个参数 $2&quot;    echo &quot;第十个参数 $10&quot;    echo &quot;第十个参数 ${10}&quot;    echo &quot;参数总数为$#&quot;    echo &quot;一个字符串输出所有参数$*&quot;}fun 1 2 34 123 21 32 31 12 1 1 1 21</code></pre><p>$#参数个数 $*单个字符串显示所有参数 $@使用时加引号，返回每个参数<br>$? 函数返回值</p><h3 id="8-调用另一个脚本"><a href="#8-调用另一个脚本" class="headerlink" title="8.调用另一个脚本"></a>8.调用另一个脚本</h3><pre><code>#!/bin/bash. ./fun.shorsource ./fun.sh</code></pre>]]></content>
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell(一)运算符、test</title>
      <link href="/2018/05/20/shell(%E4%B8%80)%E8%BF%90%E7%AE%97%E7%AC%A6_test/"/>
      <url>/2018/05/20/shell(%E4%B8%80)%E8%BF%90%E7%AE%97%E7%AC%A6_test/</url>
      <content type="html"><![CDATA[<h1 id="shell运算符、test"><a href="#shell运算符、test" class="headerlink" title="shell运算符、test"></a>shell运算符、test</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>包含算数运算符、关系运算符、布尔运算符、字符串运算符、文件测试运算符<br>原生bash不支持数学运算，可通过awk和expr</p><pre><code>#!/bin/bashval=`expr 2 + 2` #加好前后必须有空格 否则报错echo &quot;和为：$val&quot;</code></pre><h3 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1.算数运算符"></a>1.算数运算符</h3><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:center">说明</th><th style="text-align:right">例子</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:center">加</td><td style="text-align:right"><code>expr $a + $b</code></td></tr><tr><td style="text-align:left">-</td><td style="text-align:center">减</td><td style="text-align:right"><code>expr $a - $b</code></td></tr><tr><td style="text-align:left">*</td><td style="text-align:center">乘</td><td style="text-align:right"><code>expr $a \* $b</code></td></tr><tr><td style="text-align:left">/</td><td style="text-align:center">除</td><td style="text-align:right"><code>expr $a / $b</code></td></tr><tr><td style="text-align:left">%</td><td style="text-align:center">取余</td><td style="text-align:right"><code>expr $a % $b</code></td></tr><tr><td style="text-align:left">=</td><td style="text-align:center">赋值</td><td style="text-align:right">a=$b 把变量b值赋给a</td></tr><tr><td style="text-align:left">==</td><td style="text-align:center">相等，用于数字，返回true或者false</td><td style="text-align:right">if [$a == $b]</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:center">不等，判断数字，返回true or false</td><td style="text-align:right">if [$a != $b]</td></tr></tbody></table><p><b>注意 乘法*需要转义\,符号前后都要有空格</b></p><pre><code>#!/bin/bashnum1=10num2=20sum=`expr $num1 + $num2`min=`expr $num1 - $num2`cheng=`expr $num1 \* $num2`chu=`expr $num1 / $num2`yu=`expr $num1 % $num2`if [ $num1 == $num2 ]then    echo &quot;num1=num2&quot;fiif[ $num1 != $num2]then     echo &quot;num1 != num2&quot;fi</code></pre><h3 id="2-关系运算符"><a href="#2-关系运算符" class="headerlink" title="2.关系运算符"></a>2.关系运算符</h3><p>关系运算符只支持数字，不支持string，除非字符串值是数字</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:center">说明</th><th style="text-align:right">例子</th></tr></thead><tbody><tr><td style="text-align:left">-eq</td><td style="text-align:center">是否相等，返回true或false</td><td style="text-align:right">[ $a -eq $b]</td></tr><tr><td style="text-align:left">-ne</td><td style="text-align:center">是否不相等，返回true或false</td><td style="text-align:right">[ $a -ne $b]</td></tr><tr><td style="text-align:left">-gt</td><td style="text-align:center">左边是否大于右边，返回true或false</td><td style="text-align:right">[ $a -gt $b]</td></tr><tr><td style="text-align:left">-ge</td><td style="text-align:center">左边是否大于等于右边，返回true或false</td><td style="text-align:right">[ $a -ge $b]</td></tr><tr><td style="text-align:left">-lt</td><td style="text-align:center">左边是否小于右边的，返回true或false</td><td style="text-align:right">[ $a -lt $b]</td></tr><tr><td style="text-align:left">-le</td><td style="text-align:center">左边是否小于等于右边，返回true或false</td><td style="text-align:right">[ $a -le $b]</td></tr></tbody></table><pre><code>#!/bin/basha=100b=200if [ $a -gt $b ] #换哪个都行then     echo &quot;$a 大于 $b&quot;else    echo &quot;$a 小于$b&quot;fi</code></pre><h3 id="3-布尔运算符"><a href="#3-布尔运算符" class="headerlink" title="3.布尔运算符"></a>3.布尔运算符</h3><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:center">说明</th><th style="text-align:right">举例</th></tr></thead><tbody><tr><td style="text-align:left">-a</td><td style="text-align:center">与运算，表达式同时为真才是真</td><td style="text-align:right">[ $a -lt 100 -a $b -le 200 ]</td></tr><tr><td style="text-align:left">-o</td><td style="text-align:center">或运算，表达式有一个为真为真</td><td style="text-align:right">[ $a -lt 100 -o $b -le 200]</td></tr><tr><td style="text-align:left">!</td><td style="text-align:center">非运算，表达式为真返回false，取反</td><td style="text-align:right">[ !false ] 值为true</td></tr></tbody></table><pre><code>#!/bin/bashnum1=100num2=200if[ $num1 -le 101 -o $num2 -gt 300 ]then    echo &quot;嚯嚯嚯嚯嚯嚯&quot;else     echo &quot;假的&quot;fi</code></pre><h3 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h3><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:center">说明</th><th style="text-align:right">举例</th></tr></thead><tbody><tr><td style="text-align:left">&amp;&amp;</td><td style="text-align:center">逻辑and</td><td style="text-align:right">[ $a -lt 100 &amp;&amp; $b -le 200 ]</td></tr><tr><td style="text-align:left"><code>&#124;&#124;</code></td><td style="text-align:center">逻辑or</td><td style="text-align:right">[ $a -lt 100 -o $b -le 200]</td></tr></tbody></table><pre><code>#!/bin/bashnum1=100num2=200if[ $num1 -le 101 &amp;&amp; $num2 -gt 300 ]then    echo &quot;嚯嚯嚯嚯嚯嚯&quot;else     echo &quot;假的&quot;fi</code></pre><h3 id="5-字符串运算符"><a href="#5-字符串运算符" class="headerlink" title="5.字符串运算符"></a>5.字符串运算符</h3><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:center">说明</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:center">判断两个字符串是否相等，</td><td style="text-align:left">[ $a = $b ] 相等返回true</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:center">判断两个字符串是否相等，</td><td style="text-align:left">[ $a != $b ] 不相等返回true</td></tr><tr><td style="text-align:left">-z</td><td style="text-align:center">检测字符串长度是否为0，</td><td style="text-align:left">[ -z $a ] 是0返回true</td></tr><tr><td style="text-align:left">-n</td><td style="text-align:center">检测字符串长度时候为0，不为0返回true</td><td style="text-align:left">[ -n “$a” ] 不为0返回true</td></tr><tr><td style="text-align:left">str</td><td style="text-align:center">检测字符串是否为空，空false，不空true</td><td style="text-align:left">[ $a ]不空true</td></tr></tbody></table><pre><code>a=&quot;asdasd&quot;if [ $a ] #字符串是否为空then   echo &quot;$a : 字符串不为空&quot;else   echo &quot;$a : 字符串为空&quot;fi</code></pre><h3 id="6-文件测试运算符"><a href="#6-文件测试运算符" class="headerlink" title="6.文件测试运算符"></a>6.文件测试运算符</h3><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:center">说明</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">-b file</td><td style="text-align:center">检测文件是否块设备文件，是返回true</td><td style="text-align:left">[-b $file] 是返回true</td></tr><tr><td style="text-align:left">-e file</td><td style="text-align:center">检测文件(包含目录)是否存在，是返回true</td><td style="text-align:left">[-e $file ] 存在返回true</td></tr><tr><td style="text-align:left">-f file</td><td style="text-align:center">检测文件是否为普通文件(不是目录，也不是块文件)，是返回true</td><td style="text-align:left">[-e $file ] 存在返回true</td></tr><tr><td style="text-align:left">-s file</td><td style="text-align:center">检测文件是否为空，大小是否大于0，不为空返回true</td><td style="text-align:left">[-s $file ]不为空返回true</td></tr><tr><td style="text-align:left">-r file</td><td style="text-align:center">文件是否可读，是返回true</td><td style="text-align:left">[-w $file ]可读返回true</td></tr><tr><td style="text-align:left">-w file</td><td style="text-align:center">文件是否可写，是返回true</td><td style="text-align:left">[-w $file ]可写返回true</td></tr><tr><td style="text-align:left">-x file</td><td style="text-align:center">文件是否可执行，是返回true</td><td style="text-align:left">[-w $file ]可执行返回true</td></tr><tr><td style="text-align:left">-r file</td><td style="text-align:center">文件是否可读，是返回true</td><td style="text-align:left">[-w $file ]可读返回true</td></tr></tbody></table><pre><code>file=&quot;/home/jiang/test.sh&quot;if [ -r $file ]then   echo &quot;文件可读&quot;else   echo &quot;文件不可读&quot;fi</code></pre><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>检测条件是否成立数值、字符、文件三个方面</p><h3 id="数值测试"><a href="#数值测试" class="headerlink" title="数值测试"></a>数值测试</h3><p>-eq 等于为真 -ne不等为真 -gt -ge -lt -le</p><pre><code>num1=100num2=100if test $[num1] -eq $[num2] # if [ $num1 -eq $num2 ]then    echo &quot;两个数相等&quot;else    echo &quot;两个数不等&quot;fi</code></pre><h3 id="字符串测试"><a href="#字符串测试" class="headerlink" title="字符串测试"></a>字符串测试</h3><p>=等于为真 !=不等为真 -z字符串长度为0为真 -n字符串长度不为0为真</p><pre><code>num1=&quot;asdasd&quot;num2=&quot;qwerqw&quot;if test $num1 = $num2then    echo &apos;两个字符串相等!&apos;else    echo &apos;两个字符串不相等!&apos;fi</code></pre><h3 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a>文件测试</h3><blockquote><p>-e 文件名 存在为真<br>-d 文件名 文件存在且为目录为真<br>-f 文件名 文件存在且为普通文件为真<br>-s 文件名 文件岑仔且至少有一个字符为真<br>-b 文件名 文件存在且为块特殊文件为真<br>-w -r -x 文件名 文件是否为刻度可写可执行为真</p></blockquote><pre><code>cd /binif test -e ./bashthen    echo &apos;文件已存在!&apos;else    echo &apos;文件不存在!&apos;fi</code></pre>]]></content>
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell(一)变量_数组_传参_输出</title>
      <link href="/2018/05/20/shell(%E4%B8%80)%E5%8F%98%E9%87%8F_%E6%95%B0%E7%BB%84_%E4%BC%A0%E5%8F%82_%E8%BE%93%E5%87%BA/"/>
      <url>/2018/05/20/shell(%E4%B8%80)%E5%8F%98%E9%87%8F_%E6%95%B0%E7%BB%84_%E4%BC%A0%E5%8F%82_%E8%BE%93%E5%87%BA/</url>
      <content type="html"><![CDATA[<h1 id="shell变量、字符串、数组、传参、输入输入"><a href="#shell变量、字符串、数组、传参、输入输入" class="headerlink" title="shell变量、字符串、数组、传参、输入输入"></a>shell变量、字符串、数组、传参、输入输入</h1><h2 id="1-shell简介"><a href="#1-shell简介" class="headerlink" title="1.shell简介"></a>1.shell简介</h2><blockquote><p>通常我们使用bash (bourne again shell)，因为bash免费而且简单。<br>直接使用在win/Unix/Linux上面，并且可以调用大量系统内部的功能来解释执行程序，</p></blockquote><h2 id="2-shell工作原理"><a href="#2-shell工作原理" class="headerlink" title="2.shell工作原理"></a>2.shell工作原理</h2><blockquote><p>Shell可以被称作是脚本语言，因为它本身是不需要编译的，而是通过解释器解释之后再编译执行，和传统语言相比多了解释的过程所以效率会略差于传统的直接编译的语言。</p></blockquote><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h2><h3 id="第一个脚本"><a href="#第一个脚本" class="headerlink" title="第一个脚本"></a>第一个脚本</h3><p>vi test.sh创建第一个脚本</p><pre><code>#!/bin/bash         echo &quot;hello world&quot;    </code></pre><blockquote><p>cd 该目录下<br>chmod 777 test.sh #给脚本执行权限 +x 也可以<br>./test.sh    #执行脚本</p></blockquote><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><blockquote><p>英文、数字、下划线，首字符不以数字开头，中间不能有空格，可以下划线_  不能有标点，不能有关键字。<br><strong>变量名和等号之间不能有空格</strong><br>可以直接=赋值，也可以语句赋值</p></blockquote><pre><code>for file in `ls /dev`  do    echo $filedone</code></pre><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><blockquote><p>定义使用的变量，在变量名前加美元符号$ 即可，可以使用{}识别边界，变量可以重复命名。</p><pre><code>num=2echo &quot;this is $num&quot;echo &quot;this is the $numnd&quot;  # numnd 变量不存在echo &quot;this is the ${num}nd&quot; #识别边界</code></pre></blockquote><h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><blockquote><p>readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变,</p></blockquote><pre><code>#!bin/bashnum=&quot;qweq&quot;readonly numnum=&quot;asdd&quot; #重新赋值时会提示变量只读  </code></pre><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><blockquote><p>unset可以删除变量，但是不能删除只读变量</p><pre><code>unset var_name</code></pre></blockquote><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><ol><li>局部变量：脚本或命令中定义，仅在shell中使用，其他shell程序不能访问局部变量</li><li>环境变量：脚本可以定义环境变量，程序运行需要环境变量来保证</li><li>shell变量：shell程序设置的特殊变量，一部分是环境变量，一部分是局部变量，变量保证了shell的正常运行</li></ol><p>##4.字符串string<br>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p>###单引号 str=’hello world’</p><blockquote><p>单引号原样输出，变量无效，单引中不能出现单引（转义无效）</p></blockquote><p>###双引号 </p><blockquote><p>双引中可以有变量，可以有转义字符</p></blockquote><pre><code>a=&apos;qq&apos;str=&quot;hello \&quot;$a\&quot; !&quot;str1=&quot;hello $a&quot;echo str # hello &quot;qq&quot;echo str1 # hello qq</code></pre><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><pre><code>echo ${#string}</code></pre><h3 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h3><pre><code>str=&quot;hello world jiang&quot;echo `expr index &quot;$str&quot; or` #必须有&quot;&quot; 否则报错</code></pre><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5.数组"></a>5.数组</h2><p>bash只支持一维数组，下标0开始，获取数组元素利用下标。</p><p>###定义数组<br>    array_name=(val0 val1 val2 val3)  # 没有逗号</p><p>或者 </p><pre><code>array_name=(val0val1val2val3)</code></pre><p>或者单独定义各个分量，可以不使用连续的下标。下标范围没限制。</p><pre><code>array_name[0]=value0array_name[1]=value1array_name[n]=valuen</code></pre><h3 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h3><p>读取数组一般格式为${arr_name[index]}<br>使用@、*符号获取数组中所有元素 </p><pre><code>echo ${arr_name[@]}echo ${arr_name{*}}</code></pre><h3 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h3><pre><code>echo ${#arr[@]}echo ${#arr[*]}echo ${#arr[n]} #获取单个数组元素长度</code></pre><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><pre><code>#!/bin/basharr=(123 45643 7897 3213)for i in ${arr[*]}do    echo ${#i}  #打印个数    echo ${i}   #打印每个元素  done</code></pre><h2 id="6-传参"><a href="#6-传参" class="headerlink" title="6.传参"></a>6.传参</h2><h3 id="n"><a href="#n" class="headerlink" title="$n"></a>$n</h3><p>$0 脚本名 $1 第一个参数 $2 第二个参数 $3第三个参数</p><blockquote></blockquote><pre><code>#!/bin/bashecho &quot;文件名为：$0&quot;echo &quot;第一个参数为:$1&quot;echo &quot;第二个参数为:$2&quot;</code></pre><p>./test.sh start over </p><blockquote></blockquote><pre><code>文件名为 ./test.sh第一个参数为：start第二个参数为：over    </code></pre><h3 id=""><a href="#" class="headerlink" title="$# $* $@"></a>$# $* $@</h3><pre><code>#!/bin/bashecho &quot;参数个数为：$#&quot;for i in &quot;$*&quot;do    echo $idonefor i in &quot;$@&quot;do    echo $idone</code></pre><p>执行下脚本./canshu.sh 1 2 3</p><pre><code>参数个数为：31 2 3123</code></pre><h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">意义</th></tr></thead><tbody><tr><td style="text-align:left">$$</td><td style="text-align:left">显示进程ID号</td></tr><tr><td style="text-align:left">$?</td><td style="text-align:left">显示命令最后退出状态，0没错误，其他值表示有错误</td></tr><tr><td style="text-align:left">$@</td><td style="text-align:left">所有参数$@为”$1””$2””$3”</td></tr><tr><td style="text-align:left">$*</td><td style="text-align:left">所有参数$*为”$1 $2 $3..$n”</td></tr><tr><td style="text-align:left">$#</td><td style="text-align:left">参数长度</td></tr></tbody></table><h2 id="7-输出echo"><a href="#7-输出echo" class="headerlink" title="7.输出echo"></a>7.输出echo</h2><h3 id="打印普通字符串"><a href="#打印普通字符串" class="headerlink" title="打印普通字符串"></a>打印普通字符串</h3><pre><code>echo &quot;test&quot; echo test # 双引号可以省略</code></pre><h3 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a>显示转义字符</h3><pre><code>echo &quot;\&quot;test\&quot;&quot;  #&quot;test&quot;echo \&quot;test\&quot;     #&quot;test&quot;</code></pre><h3 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a>显示变量</h3><pre><code>#!/bin/bashread name    #从键盘中读取变量echo &quot;$name welcome&quot;</code></pre><h3 id="显示换行-不换行"><a href="#显示换行-不换行" class="headerlink" title="显示换行/不换行"></a>显示换行/不换行</h3><pre><code>echo -e &quot;ok \n&quot;echo -e &quot;ok \c&quot;  #-e转义 \c 不换行echo asdads  #和ok在一行</code></pre><h3 id="显示结果到指定文件"><a href="#显示结果到指定文件" class="headerlink" title="显示结果到指定文件"></a>显示结果到指定文件</h3><pre><code>echo &quot;test result&quot; &gt;  test.sh</code></pre><h3 id="原样输出字符串，不进行转义或者取变量（用单引号）"><a href="#原样输出字符串，不进行转义或者取变量（用单引号）" class="headerlink" title="原样输出字符串，不进行转义或者取变量（用单引号）"></a>原样输出字符串，不进行转义或者取变量（用单引号）</h3><pre><code>echo &apos;$name&apos; # 输出结果为 $name</code></pre><h3 id="显示命令执行结果"><a href="#显示命令执行结果" class="headerlink" title="显示命令执行结果"></a>显示命令执行结果</h3><pre><code>echo `date` #注意是反引号</code></pre><h2 id="8-读取read"><a href="#8-读取read" class="headerlink" title="8.读取read"></a>8.读取read</h2><blockquote><p>read 接收输入的参数，参数用空格进行分隔；如果输入的词组个数大于需要的参数个数，则多出的词组将被作为整体为最后一个参数接收。</p><pre><code>read first secondecho 第一个：$first 第二个：$second</code></pre><p>如果超出参数长度./test.sh 1 2 3 4<br>执行结果为 第一个：1 第二个：2 3 4<br>参数说明<br>-p 提示文字<br>-n 字符长度限制，到指定位数自动结束<br>-t 输入限时<br>-s 隐藏输入内容</p></blockquote><pre><code>read -p &quot;请输入密码&quot; -n 6 -t 5 -s passecho password is $pass</code></pre><h2 id="9-输出printf"><a href="#9-输出printf" class="headerlink" title="9.输出printf"></a>9.输出printf</h2><p>echo自带换行 printf “hello \n”手动加</p><blockquote><p>格式替代符%d %s %c %f</p></blockquote><table><thead><tr><th style="text-align:left">替代符</th><th style="text-align:center">说明</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">d</td><td style="text-align:center">十进制</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">s</td><td style="text-align:center">字符串或字符型，否则报错</td><td style="text-align:left">%-10s 宽度十字符-左对齐</td></tr><tr><td style="text-align:left">c</td><td style="text-align:center">char字符型或字符</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">f</td><td style="text-align:center">float浮点，参数是数字型</td><td style="text-align:left">%-4.2f .2指保留2位小数</td></tr></tbody></table><blockquote><p>其中最后一个参数是 “def”，%c 自动截取字符串的第一个字符作为结果输出。<br>$  printf “%d %s %c\n” 1 “abc” “def”</p></blockquote><pre><code>printf &quot;%-10s %-8s %-4s\n&quot; 姓名 性别 体重kg  printf &quot;%-10s %-8s %-4.2f\n&quot; asd 男 12.12 </code></pre><h3 id="printf转义序列"><a href="#printf转义序列" class="headerlink" title="printf转义序列"></a>printf转义序列</h3><p>\n换行 \r回车 \f 换页 \b后退 </p>]]></content>
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown语法</title>
      <link href="/2018/04/20/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/04/20/markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表(+-*)"></a>无序列表(+-*)</h3><ul><li>1</li><li>2</li><li>3</li></ul><ul><li>1</li><li>2</li><li>3</li></ul><ul><li>1</li><li>2</li><li>3</li></ul><h3 id="有序列表-数字加"><a href="#有序列表-数字加" class="headerlink" title="有序列表(数字加.)"></a>有序列表(数字加.)</h3><ol><li>列表一</li><li>列表二</li><li>列表三</li><li>列表四（这里注意数字并不对应）</li></ol><h3 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h3><ul><li>不以结婚为目的的恋爱都叫耍流氓<blockquote><p>这是毛主席说的</p></blockquote></li></ul><blockquote><h2 id="标题-1"><a href="#标题-1" class="headerlink" title="标题"></a>标题</h2><ul><li>不以结婚为目的的<blockquote><p>毛主席说的</p></blockquote></li><li>前方高能<blockquote><p>热爱刺激了</p></blockquote></li></ul></blockquote><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级的</p><blockquote><p>四级的</p><blockquote><blockquote><blockquote><p>七级的</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote><p>代码例子</p></blockquote><pre><code>protected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);}</code></pre><blockquote><h2 id="分割线可以由-（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以"><a href="#分割线可以由-（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以" class="headerlink" title="分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以"></a>分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以</h2></blockquote><hr><hr><hr><hr><hr><hr><ul><li>哈哈<sup>上标TM</sup></li><li>哈哈<sub>下标</sub><blockquote><p>自动创建链接<a href="mailto:&#x38;&#x35;&#52;&#54;&#53;&#x37;&#56;&#56;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#109;" target="_blank" rel="noopener">&#x38;&#x35;&#52;&#54;&#53;&#x37;&#56;&#56;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#109;</a></p></blockquote></li></ul><p>标注一[^5] 标注二[^3] and a definition[^qq].</p><p>[^5]: This is a footnote<br>[^3]: A footnote on “label”<br>[^qq]: The definition of a footnote.</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p><strong>加粗</strong>    <strong>加粗</strong><br><em>斜体</em>  _斜体_<br><strong><em>加粗+斜体</em></strong><br><strong><em>加粗+斜体</em></strong><br><del>删除文本</del></p><h3 id="图片和链接"><a href="#图片和链接" class="headerlink" title="图片和链接"></a>图片和链接</h3><p>图片与链接的语法很像，区别在一个 ! 号。二者格式：</p><blockquote></blockquote><pre><code>图片：![]() ![图片文本(可忽略)](图片地址)链接：[]()  [链接文本](链接地址)</code></pre><p>链接又分为行内式、参考式和自动链接</p><blockquote></blockquote><pre><code>行内式[blog](http://s85465788.github.io)参考式[blog][url]该url为链接标记，置于文中任意位置</code></pre><pre><code>自动链接：直接用&lt;&gt;括起来&lt;http://www.baidu.com&gt;</code></pre><p><a href="http://s85465788.github.io" target="_blank" rel="noopener">blog</a></p><p><a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></p><p>这是图片：<img src="http://pic1.sc.chinaz.com/files/pic/pic9/201803/zzpic10977.jpg" alt=""></p><p><img src="./01.png" alt="" title="描述"></p><h4 id="插入图片带有链接"><a href="#插入图片带有链接" class="headerlink" title="插入图片带有链接"></a>插入图片带有链接</h4><p><a href="http://www.baidu.com" target="_blank" rel="noopener"><img src="./01.png" alt="" title="百度"></a>  </p><p>[<img src="./01.png" alt="" title="百度">][5]<br>[5]: <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></p><h1 id="代码-代码块"><a href="#代码-代码块" class="headerlink" title="代码 代码块"></a>代码 代码块</h1><p>代码分为行内代码块和代码块</p><ul><li>行内：这是行内<code>document.getElementById</code>的例子    </li><li>代码块使用四个空格或<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">``` javascript</span><br><span class="line">var num = 0;</span><br><span class="line">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">    num+=i;</span><br><span class="line">&#125;</span><br><span class="line">console.log(num);</span><br></pre></td></tr></table></figure></li></ul><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>对齐格式</p><ol><li>居左:<code>:----</code></li><li>居中: <code>:----:</code>或<code>-----</code></li><li>居右: <code>----:</code>  <blockquote><ul><li>默认左对齐<br>:- 左对齐<br>-:右对齐<br>:-:居中<br>-表示列的宽度权重，比如如下，–、-，表示第一列的宽度是第二列的俩倍</li></ul></blockquote></li></ol><table><thead><tr><th style="text-align:left">左标题</th><th style="text-align:center">中间标题</th><th style="text-align:right">右标题</th></tr></thead><tbody><tr><td style="text-align:left">居左文本</td><td style="text-align:center">居中文本</td><td style="text-align:right">居右测文本</td></tr><tr><td style="text-align:left">居左文本1</td><td style="text-align:center">居中文本2</td><td style="text-align:right">居右文本3</td></tr></tbody></table><h1 id="支持css内嵌样式"><a href="#支持css内嵌样式" class="headerlink" title="支持css内嵌样式"></a>支持css内嵌样式</h1><p><strong>代码</strong></p><p style="color: #AD5D0F;font-size: 30px; font-family: '宋体';">内联样式</p><h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><p>注：一个$左对齐，两个居中</p><p>$$ x \href{why-equal.html}{=} y^2 + 1 $$<br>$ x = {-b \pm \sqrt{b^2-4ac} \over 2a}. $</p>]]></content>
      
      <categories>
          
          <category> 软件使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>九桥全同步</title>
      <link href="/2018/04/10/%E4%B9%9D%E6%A1%A5%E5%85%A8%E5%90%8C%E6%AD%A5/"/>
      <url>/2018/04/10/%E4%B9%9D%E6%A1%A5%E5%85%A8%E5%90%8C%E6%AD%A5/</url>
      <content type="html"><![CDATA[<p>dds用户修改web错误日志<br>mv msg.err msg.err20180412</p><p>巡检<br>df -h<br>vshms -p 进程运行状态<br>-m 用户状态<br>-c软件运行时间点<br>目标端只有-p -c<br>日志</p><p>web端<br>ds目录下<br>dds_pweb -q  退出<br>dds_pweb -s  打开源端<br>dds_pweb -t  打开目标端</p><p>正常关闭：（可以增量同步）<br>关源端ddstop  目标端ddstop<br>开源端ddstart 开目标端ddstart  </p><p>全同步：<br>关源端ddstop  目标端ddstop<br>源端ddclean  目标端ddclean<br>开源端ddstart 开目标端ddstart </p><p>map_start(开始全同步)<br>vs（源端实时日志）  vt（目标端实时日志） </p><p>源端    192.168.1.101<br>目标端  192.168.1.99</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> dds </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
