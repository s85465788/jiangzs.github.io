<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python基础-(五) 总结]]></title>
    <url>%2F2018%2F10%2F20%2Fpython%E5%9F%BA%E7%A1%80-(%E4%BA%94)%20%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[变量的引用 变量和数据都是存在内存中 函数参数的传递和返回值都是靠引用传递的引用 变量的数据分开存储，变量保存数据在内存中的地址叫做引用，数据保存在内存中一个位置。 使用id()查看变量保存数据所在的内存地址 变量重新赋值时，本质修改数据的引用。 123456789def test(num): print(id(num)) num = 20 print(id(num)) return numa = 10r = test(a)print(id(a))print(id(r)) #可变和不可变类型 不可变类型，内存中的数据不允许被修改： 数字类型 int, bool, float, complex, long(2.x) 字符串 str 元组 tuple 可变类型，内存中的数据可以被修改： 列表 list 字典 dict 1234a =[1,2,3]print(id(a))a = [1,3,2]print(id(a)) 结果不一样 123456a = [1,2,3]print(id(a))a.append(5)a.remove(3)a.clear()print(id(a)) 结果都是一样的 1234dic = &#123;name:jiang,age:20&#125;print(id(dic))dic.pop(age)print(id(dic)) 注意：字典的 key 只能使用不可变类型的数据 赋值会修改内存地址，调用方法不会 多个变量赋值 可以 将一个元组 使用 赋值语句 同时赋值给 多个变量 注意：变量的数量需要和元组中的元素数量保持一致，否则报错 temp, wetness = measure()##哈希（hash） Python 中内置有一个名字叫做 hash(o) 的函数 接收一个 不可变类型 的数据作为 参数 返回 结果是一个 整数 哈希 是一种 算法，其作用就是提取数据的 特征码（指纹） 相同的内容 得到 相同的结果 不同的内容 得到 不同的结果 在 Python 中，设置字典的 键值对 时，会首先对 key 进行 hash 已决定如何在内存中保存字典的数据，以方便 后续 对字典的操作：增、删、改、查 键值对的 key 必须是不可变类型数据 键值对的 value 可以是任意类型的数据全局变量和局部变量局部变量 局部变量 是在 函数内部 定义的变量，只能在函数内部使用函数 函数执行时创建，执行完成后被系统回收，不同函数内部可以定义相同局部变量 123456def demo1(): num = 10def demo2(): num = 20demo1()demo2() 全局变量 全局变量 是在 函数外部定义 的变量（没有定义在某一个函数内），所有函数 内部 都可以使用这个变量 12345678num = 10def dem1(): num = 20 print(num)def dem2(): print(num)dem1()dem2() 函数处理时，先在函数内找变量，找不到去函数外找，找不到就报错。 函数内不能修改全局变量，只是变量名相同而已。 提示：在其他的开发语言中，大多 不推荐使用全局变量 —— 可变范围太大，导致程序不好维护！ 函数内修改全局变量 如果在函数中需要修改全局变量，需要使用 global 进行声明 1234567891011num = 10def dem1(): global num num = 20 print(num)def dem2(): print(num)dem1()dem2() 全局变量定义的位置 应该 将全局变量定义在其他函数的上方，变量都是先定义 后使用 开发需求：全局变量名前应该增加 g_ 或者 gl_ 的前缀 函数进阶函数参数和返回值作用 定义函数时，是否接收参数，或者是否返回结果，是根据 实际的功能需求 来决定的！ 如果函数 内部处理的数据不确定，就可以将外界的数据以参数传递到函数内部 如果希望一个函数 执行完成后，向外界汇报执行结果，就可以增加函数的返回值无参数，无返回值 单纯做一件事，显示菜单，或对全局变量，列表字典进行操作无参数，有返回值 采集数据，温度计，不需要传参，要函数的返回结果有参数，无返回值 对数据的处理，删改操作有参数，有返回值 对数据处理，并获得处理结果函数返回值 return返回结果，可以用变量接收函数返回值 可以返回多个值，用,分开 return (temp, wetness) （）加不加都行 交换两个数字1234解法 1 - 使用临时变量c = bb = aa = c 1234解法 2 - 不使用临时变量a = a + bb = a - ba = a - b 12解法 3 —— Python 专有，利用元组a, b = b, a 函数参数 id值引用值 函数内部使用赋值，会修改内部局部变量引用。不会影响外部变量引用， 12345678910111213141516def demo(num,list) num = 200 list = [1,2,3] print(num) print(list)gl_num = 99gl_list = [4, 5, 6]demo(gl_num, gl_list)print(gl_num)print(gl_list)200[1, 2, 3]99[4, 5, 6] 如果传递的参数是 可变类型，在函数内部，使用 方法 修改了数据的内容，同样会影响到外部的数据 12345678910111213def aa(num_list): # num_list = [1, 2, 3] num_list.extend([1, 2, 3]) print(num_list)gl_list = [6, 7, 8]aa(gl_list)print(gl_list)[6, 7, 8, 1, 2, 3][6, 7, 8, 1, 2, 3] 列表+= 列表变量调用 += 本质上是在执行列表变量的 extend 方法，不会修改变量的引用 list.extend(num_list) 由于是调用方法，所以不会修改变量的引用，但是会修改外部数据 123456789101112131415def demo(num,list): num += num list += list print(num) print(list)gl_num = 9gl_list = [1,2,3]demo(gl_num,gl_list)print(gl_num)print(gl_list)18[1, 2, 3, 1, 2, 3]9[1, 2, 3, 1, 2, 3] 缺省参数 定义函数时，参数指定默认值，叫缺省参数， 调用函数时，如果没传参，则使用默认参数，将常见设置为参数缺省值 12345678list = [1,2,6,2,3]list.sort()print(list)list.sort(reverse = True)print(list)[1, 2, 2, 3, 6][6, 3, 2, 2, 1] 缺省参数的设置 缺省参数位置必须在最后 使用最常见的值作为默认值 多个缺省参数，需要指定参数名对应起来 123456789101112def inf(name,title="学生",sex=True): sex_if = "man" if not sex： sex_if = "miss" print("%s is %s is %s"%(name,title,sex))inf("jiang")inf("wang",title = "老师")inf("zhang",sex = False)jiang is 学生 is manwang is 老师 is manzhang is 学生 is miss 了解多值参数 有时候不确定函数传递的参数，这时使用多值参数 参数名前增加 一个 * 可以接收 元组 参数名前增加 两个 * 可以接收 字典 12345678def demo(num, *args, **kwargs): print(num) print(args) print(kwargs)demo(1, 2, 3, 4, 5, name="小明", age=18, gender=True) 案例：计算任意多个数字的和12345678def sum(*ss): num = 0 for i in ss: num += i return numprint(sum(1,2,3))6 元组和字典的拆包 调用多值参数函数时，形参在元组变量前加一个* 字典变量前加两个** 1234567891011121314def dem(*lis,**dic): print(lis) print(dic)num_list = (1,2,3)inf_dic = &#123;"name":"小明","age":18&#125;dem(num_list,inf_dic)dem(*num_list,**inf_dic)((1, 2, 3), &#123;'age': 18, 'name': '小明'&#125;)&#123;&#125;(1, 2, 3)&#123;'age': 18, 'name': '小明'&#125; 函数递归 函数调用自身的 编程技巧 称为递归 函数递归特点 函数内部可以调用其他函数，也可以函数内调用自己。 当 参数满足一个条件 时，函数不再执行，否则死循环 123456def sum(num): if num == 1: return sum(num - 1)sum(5) 123456def sum(num): if num == 1: return 1 return num + sum(num-1)print(sum(100)) 提示：递归是一个 编程技巧，初次接触递归会感觉有些吃力！在处理 不确定的循环条件时，格外的有用，例如：遍历整个文件目录的结构]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python基础-(四) 函数、列表、元组、字典、字符串、切片]]></title>
    <url>%2F2018%2F10%2F11%2Fpython%E5%9F%BA%E7%A1%80-(%E5%9B%9B)%20%E5%87%BD%E6%95%B0%E3%80%81%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[函数 所谓函数，就是把 具有独立功能的代码块 组织为一个小模块，在需要的时候 调用 函数的使用包含两个步骤： 定义函数 —— 封装 独立的功能 调用函数 —— 享受 封装 的成果 函数的作用，在开发程序时，使用函数可以提高编写的效率以及代码的 重用 调用py文件里的函数 import 文件名 文件名.函数名即可函数定义和调用 1234def 函数名(): 函数封装的代码 …… 12345ss = "jiang"def name(): print("hello %s"%ss)name() 命名要体现功能，符合命名规则 函数名由字母、下划线、数字组成 不能数字开头，不能与关键字重名 调用： 函数名() 即可完成对函数的调用 shift+ f10执行 shift+f9 调试 f8下一步 f7进入函数下一步 函数必须先定义 后调用，即调用在定义下面 否则undefined 函数注释使用””””dss””” ctrl+q快速查看函数注释函数的参数函数是具有独立功能的代码块 参数增加多元性 123456def sum(a,b): #a = 10 #b = 20 res = a + b print("%d+%d=%d"%(a,b,res))sum(10,20) 定义时括号内的是形参，形式上的参数，调用传递的是实参，实际值 函数的返回值 返回值 是函数 完成工作后，最后 给调用者的 一个结果 使用 return 关键字可以返回结果，return后的代码都不会被执行 调用函数一方，可以 使用变量 来 接收 函数的返回结果 12345def sum(num1,num2): return num1 + num2 print("这里并不会被执行哦")res = sum(10,20)print("结果还是%d"%res) 函数的嵌套调用一个函数里面 又调用 了 另外一个函数，这就是 函数嵌套调用 1234567def fun1(): print("ok")def fun2(): print("111") fun1()fun2() 123456789def money(num,price): return num*pricedef apple(): num = float(input("输入苹果斤数：")) price = float(input("输入苹果单价：")) print("单价为：%2d,斤数为：%.2f，总价为：%4f"%(price,num,money(num,price)))apple() 使用模块中的函数 模块 就好比是 工具包，要想使用这个工具包中的工具，就需要 导入 import 这个模块 每一个以扩展名 py 结尾的 Python 源代码文件都是一个 **模块 模块名.变量 / 模块名.函数 的方式，使用这个模块中定义的变量或者函数 命名复核命名规范，以数字开头 是无法在 PyCharm 中通过导入这个模块。 12import moneymoney.num=10 pyc文件 compiled 编译过 的意思， __pycache__ 的目录.pyc 文件，由 Python 解释器将 模块的源码 转换为 字节码，启动 速度的优化 Python 在解释源程序时是分成两个步骤的 首先处理源代码，编译 生成一个二进制 字节码 再对 字节码 进行处理，才会生成 CPU 能够识别的 机器码 有了pyc文件后，下次执行时会跳过编译这个步骤。列表list 专门用于存储 一串 信息，用 [] 定义，数据 之间使用 , 分隔，索引 从 0 开始 注意：从列表中取值时，如果 超出索引范围，程序会报错 1name_list = ["zhangsan", "lisi", "wangwu"] 列表常见方法1234python&gt;&gt;&gt; name_list.name_list.append name_list.count name_list.insert name_list.reversename_list.clear name_list.extend name_list.pop name_list.sortname_list.copy name_list.index name_list.remove 增加 insert，list.insert(索引，数据) 在指定位置插入数据 append list.append(数据) 在末尾插入数据， extend list.extend(列表2) 合并列表修改 list[索引] = 值 修改指定索引的数据删除 del list[index] 删除指定索引的数据 将变量从内存中删除，后续代码不可在使用。 remove list.remove[数值] 删除列表中第一个出现的指定数据 pop list.pop() 删除列表最后一个数据 list.pop(index)删除指定索引的数据 clear list.clear() 清空列表统计 len len(list名) 列表长度 count list.count(值) 统计数据在列表中出现的次数排序 sort list.sort() 升序 list.sort(reverse=true) 降序 list.reverse() 逆序，顺序反过来关键字、函数、方法 关键字 是 Python 内置的、具有特殊意义的标识符，关键字后面不需要使用括号 函数 封装了独立功能，可以直接调用 方法 需要通过 对象 来调用，表示针对这个 对象 要做的操 循环遍历 遍历 就是 从头到尾 依次 从 列表 中获取数据 在 循环体内部 针对 每一个元素，执行相同的操作 在 Python 中为了提高列表的遍历效率，专门提供的 迭代 iteration 遍历，使用 for 就能够实现迭代遍历 1234# for 循环内部使用的变量 in 列表for i in name_list: 循环内部针对列表元素进行操作 print(i) 通过 迭代遍历，在循环体内部，针对列表中的每一项元素，执行相同的操作 元组 tuple与列表相似，区别在于元组数据不可以被修改 可以存放多个元素，用,分开，用()定义，索引从0开始 1tuple = ("jiang",27,1.78) 创建空元组1tup = () 元组中只有一个元素时，需要在元素后添加,不加的话类型就是str or int，加了就是元组类型。 1tuple = (ss,) 遍历元组 取值时指定位置的值，遍历是从头到尾依次获取数据 123tup = ("jiang",27，1.78)for i in tup print(i) for in 可以遍历 列表 元组 字典 字符串，实际开发中，元组遍历不多，除非能确认元组中的数据类型。 应用场景 格式字符串，格式化字符串后面的 () 本质上就是一个元组 让列表不可以被修改，以保护数据安全 12info = ("jiang", 27)print("%s 的年龄是 %d" % info) 元组列表之间的切换 使用list把元组转成列表 1list(元组名) 使用tuple函数把列表转换成元组 1tuple(列表) 字典 字典是除list意外最常用的数据类型，可以存储多个数据，通常存储描述一个物体的相关信息 使用{}定义，存储数据时采用无序集合，而列表时有序集合 键值对key是索引，value是值，键值用：分开，数据用，分开 key值必须是唯一的，只能使用 字符串、数字或 元组。值可以是任意数据类型 1234xiaoming = &#123;"name": "小明", "age": 18, "sex": True, "height": 1.75&#125; 字典常用的操作12345In [1]: xiaoming.xiaoming.clear xiaoming.items xiaoming.setdefaultxiaoming.copy xiaoming.keys xiaoming.updatexiaoming.fromkeys xiaoming.pop xiaoming.valuesxiaoming.get xiaoming.popitem 取值 print(xiaoming[“age”]) 增加修改，key值存在即修改，不存在就是添加 xiaoming[“age”] = 27 删除 xiaoming.pop(“name”) key值不存在时会报错 统计键值对数量 len(xiaoming) 合并字典 tem = {“hobby”:play} xiaoming.update(tem)如果tem存在之前的key值，会更新该key的val值 清空 xiaoming.clear() 遍历字典 就是 依次 从 字典 中获取所有键值对 123\# for i in dict i就是key值for i in xiaoming: print("%s:%s"%(i,xiaoming[i])) 应用场景 使用 多个键值对，存储 描述一个 物体 的相关信息 —— 描述更复杂的数据信息 将 多个字典 放在 一个列表 中，再进行遍历，在循环体内部针对每一个字典进行 相同的处理 1234567card_list = [&#123;"name": "张三", "qq": "12345", "phone": "110"&#125;, &#123;"name": "李四", "qq": "54321", "phone": "10086"&#125; ] 字符串 字符串 就是 一串字符，是编程语言中表示文本的数据类型 可以一对双引或一对单引来定义一个字符串， 如果字符串内部需要使用 &quot;，可以使用 &#39; 定义字符串 如果字符串内部需要使用 &#39;，可以使用 &quot; 定义字符串字符串常用操作 12345678910111213141516In [1]: hello_str.hello_str.capitalize hello_str.isidentifier hello_str.rindexhello_str.casefold hello_str.islower hello_str.rjusthello_str.center hello_str.isnumeric hello_str.rpartitionhello_str.count hello_str.isprintable hello_str.rsplithello_str.encode hello_str.isspace hello_str.rstriphello_str.endswith hello_str.istitle hello_str.splithello_str.expandtabs hello_str.isupper hello_str.splitlineshello_str.find hello_str.join hello_str.startswithhello_str.format hello_str.ljust hello_str.striphello_str.format_map hello_str.lower hello_str.swapcasehello_str.index hello_str.lstrip hello_str.titlehello_str.isalnum hello_str.maketrans hello_str.translatehello_str.isalpha hello_str.partition hello_str.upperhello_str.isdecimal hello_str.replace hello_str.zfillhello_str.isdigit hello_str.rfind 判断类型 string.isspace() string中只包含空格，返回true string.isalnum() string中至少有一个字符，并且所有字符后市字母或数字，返回true string.isalpha() string至少有一个字符，并且都是字母返回true string.isdecimal() string中只包含全角数字 数字，返回true string.isdigital() string中只包含全角数字、⑴、\u00b2数字，返回true string.isnumeric()string 只包含数字则返回 True，全角数字，汉字数字 string.istitle() string是标题化的(每个单词首字母大写)返回true string.islower() string至少包含一个区分大小写字符，包含的单词都是小写为true string.isupper() string包含至少一个区分大小写字符，并且区分的字符都是大写返回true 查找替换 string.startwith(str) 检查字符是否以str开头，是返回true string.endwith(str)检查字符串是否以str结束，是则返回true string.find(str,start=0,end=len(string)) 检查str是否在string中，从0开始到结尾，是返回索引值，不是为-1 string.rfind(str,start=0,end=5)类似find，从右侧开始 string.index(str,start=0,end=len(string))查索引值，不存在报错 string.rindex(str,start=0,end=(10))同上，从右侧开始 string.replace(old,new,num=5)替换字符串，如果num限制替换次数 大小写转换 string.capitalize() 字符串首字符大写 string.title() 字符串每个单词首字母大写 string.lower() 字符串中所有大写字符转小写 string.upper() 字符串中所有小写转大写 string.swapcase() 字符串中大小写翻转 文本对齐 string.ljust(width) 返回一个新字符串左对齐，空格填充至width string.rjust(width) 返回一个新字符串👉对齐，空格填充至width string.center(width) 返回一个新字符串居中，并使用空格填充至width 去除空白字符 string.lstrip() 去掉string左边开始的空白字符 string.rstrip() 去掉string右边开始的空白字符 string.strip() 去掉string左右两边的空白字符 拆分连接 string.partition(str) 把string分成3元素的元组，(str前，str，str后) string.rpartition(str)把string从右侧开始分成三元素元组 string.splite(str=” “,num)以str为分隔符拆分string，如果num有值，分为num+1个字符串，str默认包含\r,\t,\n和空格 string.splitelines() 按照行(\r,\n,\r\n)分隔，返回一个包含各行作为元素的列表 string.join(seq) 以string作为分隔符。将seq中所有元素合并为一个新字符串 切片 切片适用于 字符串 列表 元组 使用索引值切，能获取有序列表集合，所以字典不可以。键值对就好了 1字符串[开始索引:结束索引:步长] 注意： 区间属于 左闭右开 型，从 起始 位开始，到 结束位的前一位 结束（不包含结束位本身) 从头开始，开始索引 数字可以省略，冒号不能省略 到末尾结束，结束索引 数字可以省略，冒号不能省略 步长默认为 1，如果连续切片，数字和冒号都可以省略 从右开始切：最右边的索引值是 -1，依次递减 步数为-1 num = “0123456789” 截取2-5的字符串 num[2:6] 截取2-末尾的字符串 num[2:] 截取开始到2的字符串 num[:3] 截取完整字符串 num[:] 从开始位置每隔一个字符截取 num[::2] 从索引1开始，每隔一个字符截取字符串 num[1::2] 截取最后一个字符 num[-1] 截取2-末尾的字符串 num[2:-1] 截取末尾两个字符串 num [-2:] 字符串逆序 num[::-1] 内置函数和运算符Python 包含了以下内置函数： 函数 描述 备注 len(item) 计算容器中元素个数 del(item) 删除变量 del 有两种方式 max(item) 返回容器中元素最大值 如果是字典，只针对 key 比较 min(item) 返回容器中元素最小值 如果是字典，只针对 key 比较 cmp(item1, item2) 比较两个值，-1 小于/0 相等/1 大于 Python 3.x 取消了 cmp 函数 运算符 运算符 Python 表达式 结果 描述 支持的数据类型 + [1, 2] + [3, 4] [1, 2, 3, 4] 合并 字符串、列表、元组 * [“Hi!”] * 4 [‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’] 重复 字符串、列表、元组 in 3 in (1, 2, 3) True 元素是否存在 字符串、列表、元组、字典 not in 4 not in (1, 2, 3) True 元素是否不存在 字符串、列表、元组、字典 &gt; &gt;= == &lt; &lt;= (1, 2, 3) &lt; (2, 2, 3) True 元素比较 字符串、列表、元组 注意 in 在对 字典 操作时，判断的是 字典的键 in 和 not in 被称为 成员运算符]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python基础-(三) if、while、break、continue]]></title>
    <url>%2F2018%2F10%2F10%2Fpython%E5%9F%BA%E7%A1%80-(%E4%B8%89)%20if%E3%80%81while%E3%80%81for%2F</url>
    <content type="text"><![CDATA[ifif的基本语法格式如下： 12if 条件： 条件成立，执行 注意缩进一个tab，或四个空格 12345age = int(input("请输入年纪："))if age !=18: print("不是18") print("到这是if的代码块")print("这是最后无论怎样都会执行的，不再if中") if else1234if 条件： 条件成立时执行的代码esle: 条件不成立，要做的 123456789101112131415161718age = input("请输入年纪")if age == 18: print("ok")elif age &gt; 18: print("smaller")esle: print("bigger")## 逻辑运算and or not### andand两边同时成立则为真，否则执行else```pythonage = 100if age &gt; 0 and age &lt;110 print("ok")else: print("not ok") oror两边有一个成立为真，就为真 1234567score1 = 20score2 = 80if score1 &gt; 60 or score2 &gt;60: print("ok")else: print("gg") not123456aa = ['jiang','wang','sss']if 'sss' not in aa : print('no')else: print('ojbk') elif多个条件时，可以用elif，格式为 dif 条件1 ： 执行111elif 条件2 ： 执行222elif 条件3 : 执行333else: 都不符合执行的。。 1234567age = 18if age &gt; 18: print("caida")elif age == 18: print("ok")else: print("young") if嵌套 dif 条件1： 执行的 if 条件1满足基础上的条件2： 条件2执行的代码 else: 不满足2时执行的代码else: 不满足条件1时执行的代码 12345678910age = 12high = 130if age &gt; 10: print("可以进入大门") if high &gt; 120: print("您身高为%d，可以站着看比赛"%high) else: print("不可以观看")else: print("不可以进入大门") 剪刀石头布12345678910import randomyou = int(input("请输入剪刀（1）石头（2）布（3）:"))com = random.randint(1,3)print("你输入的是%d，电脑是%d"%(you,com))if (you == 1 and com == 3 ) or (you == 2 and com == 1) or (you == 3 and com ==2): print("you win")elif you == com: print("he")else: print("loser") 运算符 算术运算符 + - * / // % ** 关系运算符 == != &gt; &gt;= &lt; &lt;= 逻辑运算符 and or not *赋值运算符 = += -+ *= /= //= %= **= 运算符优先级 运算符 描述 ** 幂 (最高优先级) * / % // 乘、除、取余数、取整除 + - 加法、减法 &lt;= &lt; &gt; &gt;= 比较运算符 == != 等于运算符 = %= /= //= -= += *= **= 赋值运算符 not or and 逻辑运算符 while常用的应用场景就是 让执行的代码 按照 指定的次数 重复 执行 基本语法1234初始条件设置 如num=0while 条件(判断 计数器 是否达到 目标次数): 条件满足时，做的事情1 处理条件(计数器 + 1) #这里很关键哦 while 语句以及缩进部分是一个 完整的代码块 死循环：忘记 在循环内部 修改循环的判断条件， 计数一般从0开始。 123456num = 0res = 0while num &lt;= 100: res += num num++print("1-100和为%s"%res) 123456\#1-100偶数num = 0while num &lt;= 100: if num %2 == 0 print(num) num += 1 break continue break 跳出循环，不执行后面代码 continue 跳出本次循环，不执行后面代码，但是执行循环 1234567i = 0while i &lt; 10: if i ==5: break print(i) i += 1print("gg") 1234567i = 0while i &lt; 10: if i == 5: i += 1 contiune print(i) while 循环嵌套 while 嵌套就是：while 里面还有 while 1234567while 条件 1: 条件满足时，做的事情1 条件满足时，做的事情2 while 条件 2: 条件满足时，做的事情1 处理条件 2 处理条件 1 123456789\#打印*num = 1while num &lt;= 9: col = 1 while col &lt; num: print("*",end=" ") col += 1 print("") num += 1 123456789\#打印99乘法表num = 1while num &lt;= 9: col = 1 while col &lt;= num: print("%d * %d = %d"%(col,num,col*num),end="\t") col += 1 print("") num += 1 转义字符 转义字符 描述 \\ 反斜杠符号 \‘ 单引号 \“ 双引号 \n 换行 \t 横向制表符 \r 回车 for1234for i in 集合： 循环代码else: for中没break，循环后执行的代码 应用场景 遍历时，一个list包含多个字典，判断某一个字典是否存在指定值，存在退出循环，不存在执行统一提示 12345678910111213list = [ &#123;"name":"jiang","age":20&#125;, &#123;"name":"wang","age":18&#125;]fin = "jiang"for nam in list: if nam["name"] == fin: print("got it") breakelse: print("meizhaodao")print("done")]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python基础-(二) 注释、运算符、变量]]></title>
    <url>%2F2018%2F10%2F08%2Fpython%E5%9F%BA%E7%A1%80-(%E4%BA%8C)%20%E6%B3%A8%E9%87%8A%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[注释以#开头，符号右边的都被当成说明文字，起到辅助作用 单行注释 # 这是单行注释，这行都是注释内容，下面才是程序print(“hello jiang”)也可以放在代码的后面，最好加两个空格print(“hello me”) #这里是注释 多行注释（块注释）注释信息多，一行显示不下，就用多行注释 一对连续的三个引号示例： “””这里是i注释哦这里也是哈哈哈“”” 算术运算符01. 算数运算符 算数运算符是 运算符的一种 是完成基本的算术运算使用的符号，用来处理四则运算 运算符 描述 实例 + 加 10 + 20 = 30 - 减 10 - 20 = -10 * 乘 10 * 20 = 200 / 除 10 / 20 = 0.5 // 取整除 返回除法的整数部分（商） 9 // 2 输出结果 4 % 取余数 返回除法的余数 9 % 2 = 1 ** 幂 又称次方、乘方，2 ** 3 = 8 02. 算数运算符的优先级 和数学中的运算符的优先级一致 先乘除后加减 同级运算符是 从左至右 计算 可以使用 () 调整计算的优先级 以下表格的算数优先级由高到最低顺序排列 运算符 描述 ** 幂 (最高优先级) * / % // 乘、除、取余数、取整除 + - 加法、减法 变量程序用来处理数据的，变量就是用来存储数据的 变量命名规则 可以由 字母、下划线 和 数字 组成,不能有其他符号不能以数字开头不能与关键字重名 关键字是python内部已使用的标识符，使用下面命令查看import keywordprint(keyword.kwlist)1['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 单词之间用下划线连接驼峰命名法即可。 变量定义=赋值 左边变量名 右边变量值 变量先定义后使用，要不就undefined了,变量可以重复定义。 #定义num 然后调用num = 1num2 = 5print(num)print(num*num2) 变量类型定义变量是 不需要指定类型（在其他很多高级语言中都需要） 数据类型可以分为 数字型 和 非数字型 数字型 整型 (int) 浮点型（float） 布尔型（bool） 真 True 非 0 数 —— 非零即真 假 False 0 复数型 (complex) 主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题 非数字型 字符串 列表 元组 字典python2中整数还区分int long 3中只有int 使用”type(变量名)“ 查看变量类型变量运算bool值true为1 false为0 可以与数字进行加减乘除同类型的变量可以进行运算，数字字符计算会报错哦字符串变量拼接可以用 + 或者 * 来拼接 str1 = “jiang”str2 = “zs”print(str1+str2)print(str1*5) 变量输入可以使用 input 函数从键盘等待用户的输入 用户输入的 任何内容 Python 都认为是一个 字符串 python字符串变量 = input(“提示信息：”)int(x) 强制类型转换 例子123price = float(input("请输入价格"))num = int(input("请输入数量"))print(price*num) 格式化输出 格式化字符 含义 %s 字符串 %d 有符号十进制整数，%06d 表示输出的整数显示位数，不足的地方使用 0 补全 %f 浮点数，%.2f 表示小数点后只显示两位 %% 输出 % 语法格式如下： 12print("格式化字符串" % 变量1)print("格式化字符串" % (变量1, 变量2...)) 例子 1234print("我的名字叫 %s，请多多关照！" % name)print("我的学号是 %06d" % student_no)print("苹果单价 %.02f 元／斤，购买 %.02f 斤，需要支付 %.02f 元" % (price, weight, money))print("数据比例是 %.02f%%" % (scale * 100)) 个人名片 1234567891011121314151617"""在控制台依次提示用户输入：姓名、公司、职位、电话、电子邮箱"""name = input("请输入姓名：")company = input("请输入公司：")title = input("请输入职位：")phone = input("请输入电话：")email = input("请输入邮箱：")print("*" * 30)print(company)print()print("%s (%s)" % (name, title))print()print("电话：%s" % phone)print("邮箱：%s" % email)print("*" * 30)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python基础-(一)简介]]></title>
    <url>%2F2018%2F10%2F08%2Fpython%E5%9F%BA%E7%A1%80-(%E4%B8%80)%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[Python介绍1991年第一个Python解释器诞生，它是用C语言实现的并能够调用C语言的库文件 解释器计算机不能处理机器语言01之外的语言，所以需要先翻译在执行，这种翻译工具称之为编译器，编译器翻译方式又分为编译，解释。当以解释方式运行的时候也成为解释器。 编译型语言：程序执行前先编译，翻译成机器语言文件，运行程序时不需要重新编译，直接使用编译结果就行，效率高，依赖编译器，跨平台差。如c c++解释型语言：解释型语言执行前不预编译，文本存储代码，逐行执行，运行程序时，先解释在执行，跨平台性能好，win linux mac下配置好解释环境执行代码文件即可。 Python 特点 Python是完全面向对象的语言 万物皆对象，函数、模块、数字、字符串都是对象 完全支持继承、重载、多重继承 支持重载运算符，也支持泛型设计 Python 拥有一个强大的标准库 Python核心包含数字、字符串、列表、字典、文件 等常见类型和函数； Python 标准库提供了 系统管理、网络通信、文本处理、数据库接口、图形系统、XML 处理 等额外的功能 Python 社区提供了大量的第三方模块，使用方式与标准库类似。它们的功能覆盖 科学计算、人工智能、机器学习、Web 开发、数据库接口、图形系统 多个领域，import…优缺点 胶水语言，开源，库多，扩展性好，如果需要一段关键代码运行得更快或者希望某些算法不公开，可以把这部分程序用 C 或 C++ 编写，然后在 Python 程序中使用它们 运行速度/市场占有/文献第一个Python程序源程序.py结尾的文件，pyc是py编译后的二进制文件，加载速度快，看不到源码，可以反编译。内置库py_compile可以把py编译成pyc文件。新建py文件，输入 pythonprint(“hello python”)print(“hello world”) 然后windows/linux下python 01-HelloPython.py 认识错误拼写错误：NameError: name ‘pirnt’ is not defined语法错误：SyntaxError: invalid syntax缩进错误：IndentationError: unexpected indent版本错误：2.x解释器名称是python；3.x 的解释器名称是 python3 版本目前市场上有两个 Python 的版本并存着，分别是 Python 2.x 和 Python 3.x Python 2.x 是 过去的版本 解释器名称是 python Python 3.x 是 现在和未来 主流的版本 解释器名称是 python3 相对于 Python 的早期版本，这是一个 较大的升级 为了不带入过多的累赘，Python 3.0 在设计的时候 没有考虑向下兼容 许多早期 Python 版本设计的程序都无法在 Python 3.0 上正常执行 Python 3.0 发布于 2008 年 到目前为止，Python 3.0 的稳定版本已经有很多年了 Python 3.3 发布于 2012 Python 3.4 发布于 2014 Python 3.5 发布于 2015 Python 3.6 发布于 2016 过渡版本 —— Python 2.62010 年中推出的 Python 2.7 被确定为 最后一个Python 2.x 版本python运行的三种方式解释器 python / python3windows下都可以>>>12345### 使用 python 2.x 解释器$ python xxx.py### 使用 python 3.x 解释器$ python3 xxx.py 交互式在 Python 的 Shell 中直接输入 Python 的代码，会立即看到程序执行结果， 适合于学习/验证 Python 语法或者局部代码代码不能保存/不适合运行太大的程序&gt;&gt;&gt; exit()退出解释器或者ctrl+d IPython IPython 中 的 “I” 代表 交互 interactive特点 IPython 是一个 python 的 交互式 shell，比默认的 python shell 好用得多 支持自动补全 自动缩进 支持 bash shell 命令 内置了许多很有用的功能和函数 IPython 是基于 BSD 开源的In [1]: exit退出解释器或者ctrl+d Python 的 IDE —— PyCharm1）集成开发环境（IDE）集成开发环境（IDE，Integrated Development Environment）—— 集成了开发软件需要的所有工具，一般包括以下工具： 图形用户界面 代码编辑器（支持 代码补全／自动缩进） 编译器／解释器 调试器（断点／单步执行）2）PyCharm 介绍 PyCharm 是 Python 的一款非常优秀的集成开发环境 PyCharm 除了具有一般 IDE 所必备功能外，还可以在 Windows、Linux、macOS 下使用 PyCharm 适合开发大型项目 一个项目通常会包含 很多源文件 每个 源文件 的代码行数是有限的，通常在几百行之内 每个 源文件 各司其职，共同完成复杂的业务功能恢复 PyCharm 的初始设置PyCharm 的 配置信息 是保存在 用户家目录下 的 .PyCharmxxxx.x 目录下的，xxxx.x 表示当前使用的 PyCharm 的版本号如果要恢复 PyCharm 的初始设置，可以按照以下步骤进行： 关闭正在运行的 PyCharm 在终端中执行以下终端命令，删除 PyCharm 的配置信息目录： 1$ rm -r ~/.PyCharm2016.3 重新启动 PyCharm安装和启动步骤 执行以下终端命令，解压缩下载后的安装包 1$ tar -zxvf pycharm-professional-2017.1.3.tar.gz 将解压缩后的目录移动到 /opt 目录下，可以方便其他用户使用 /opt 目录用户存放给主机额外安装的软件1$ sudo mv pycharm-2017.1.3/ /opt/ 切换工作目录 1$ cd /opt/pycharm-2017.1.3/bin 启动 PyCharm 1$ ./pycharm.sh 03.程序卸载 要卸载 PyCharm 只需要做以下两步工作： 删除解压缩目录 1$ sudo rm -r /opt/pycharm-2016.3.1/ 删除家目录下用于保存配置信息的隐藏目录 1$ rm -r ~/.PyCharm2016.3/ 如果不再使用 PyCharm 还需要将 /usr/share/applications/ 下的 jetbrains-pycharm.desktop 删掉]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux基础命令]]></title>
    <url>%2F2018%2F05%2F22%2Flinux%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[Linux系统简介linux内核及发行版本 Linux内核版本 内核(kernel)系统心脏，终端–&gt;系统调用—&gt;硬件,设备和应用程序的抽象层。内核又分为稳定版和开发版:稳定版：工业强度 广泛应用部署，新版相对于旧版只是修正bug或加入驱动程序开发版：由于用于实验各种解决方案，所以变化很快. Linux发行版本 （也叫GNU/linux发行版本）通常包括桌面环境、办公套件、media、dbUbuntu、Redhat、Fedora、openSUSE、Debian、centos、arch。。 命令查阅命令帮助信息 command –helpman command 空格 下一页 enter 下一行 b 上一屏 f 下一屏 q 退出 /word 搜索 目录相关命令 Linux文件或目录名称最长256个字符.开头为隐藏的文件 -a显示 touch .test.txt 创建隐藏文本.当前目录..上一级目录 ls ls list缩写，相当于dos下的dir 蓝色文件夹 白色文件 ls -a 查看所有ls .txt 代表任意个字符？ ls te?t.txt ？只能代表一个字符[]匹配[]中的任意一个 ls [twqs]st.txt[abc]匹配abc中的任意一个[a-f]匹配a-f中的任意一个 ls [1-3]st.txt cdchange directory 更改目录 cd 当前用户的家目录 /home/当前用户cd ~ 同上cd .当前目录cd .. 切换上级目录cd - 最近两个工作目录来回切换 绝对路径：以 / 或者~开头，从根目录或家目录开始相对路径：不以/~开头的，相对于当前目录。 文件目录命令touch创建文件或修改文件时间 如果文件不存在，创建一个空白文件。如果文件存在，修改文件最后修改日期 mkdir创建新的目录 mkdir -p /home/jiang/sssd/test 递归创建目录新建目录不能与已有目录或文件同名。 rm删除目录或文件，删除后不能恢复 rm -f 强制删除，不提示rm -r 删文件夹必须加该参数rm *.txt 删除以txt结尾的文件 tree以树状图列出文件目录结构tree -d 只显示目录，不显示文件 cpcp 源文件 目标文件 复制文件或者文件夹(不想改名直接加目标目录即可) cp -i 覆盖文件提示，cp -r 若复制目录下子目录和文件，目标文件必须为一个目录名。 mv移动文件或目录，也可以重命名。 mv 源文件 目标文件 mv -i 源文件 目标文件 cat1.查看文件内容、创建文件、合并文件、追加文件。2.cat会一次显示所有内容，适合查看文本较少的文件。 cat -b 输出非空编号 等价linux中的nlcat -n 输出所有编号cat -T 将tab显示为^lcat &gt; test.txt &lt;&lt; EOF 创建test.txtcat &gt;&gt; linuxsir.txt &lt;&lt; EOF 向test.txt追加内容 more more用于分屏显示文件内容，每次只显示一页内容 -l 忽略ctrl + l 换页字符 -p 顶部清屏然后显示，相当于-c -s 将连续的空行显示为一行 -u 将文件中的下划线去掉 +num 从第num行开始显示 -num 每屏显示num行 空格 下一屏 回车 下一行 b 上一屏 f 下一屏 q 退出 /word 查找字符串head tail head是显示一个文件的前多少行，head -n num 文件名 tail是查看文件最后的多少行，tail -n num 文件名grep文本搜索工具,可以匹配正则。 grep sss test.txt grep -n ss test.txt 显示行号 grep -v ss test.txt 反选包含ss的 grep -i ss test.txt 不区分大小写 grep -i “hello ss” test.txt 高亮显示字符串常见的正则查找 ^ss 搜索以ss开头的行 grep ^ss 1.txt ss$ 搜索以ss结尾的行 grep -n ss$ 1.txtecho echo会在终端显示指定的文字参数，通常配合重定向 将执行结果重定向到一个文件 输出，覆盖原文件内容 追加，追加到文件的末尾 tree &gt; test.txt 管道| 一个命令的输出结果作为另一个命令的输入，左写右读 常配合more分屏太多内容 如 ls -lah | more grep 输出结果中过滤文本，history | grep error 远程管理常用的命令shutdown关机或者重启 shutdown 选项 时间 shutdown 不加参数或选项，默认一分钟后自动关闭 shutdown now 立刻关机 shutdown -r now 立即重启电脑 shutdown 8：30 在8：30自动关机 shutdown -c 取消自动关机 shutdown +10 十分钟后自动关机reboot reboot 直接重启init init 0 关机init 3 切换到多用户init 5 切换到图形界面init 6 重启 ifconfig 查看网卡ip信息，相当于windows下的ipconfig。 网卡相当于sim卡，ip相当于电话号码。 查看ip ifconfig | grep inet sshssh专为远程登陆会话提供的安全协议，防止信息泄露，传输过程中经过压缩，加快传输速度。 ip找到网络上计算机，端口号找到计算机的应用程序，windows下直接是服务。 ssh服务器 22 web服务器 80 https 443 ftp服务器 21 ssh [-p port] user@remoteip -p指定其他端口，remote ip或域名 linux下ssh，windows下xshell或者putty 家目录下.ssh目录会保存ssh的登陆配置信息，第一次会生成 免密登陆，客户端下操作哦 ssh-keygen 生产ssh钥匙，配置公钥，执行后会在.ssh下生成两个id文件ssh-copy-id [-p port] user@remote 上传id_rsa.pub公钥到服务器，服务器加目录下.ssh目录下多个文件， 非对称加密算法，公钥加密的数据，需要私钥解密，传输数据时，客户端私钥加密，服务器端公钥解密 id_rsa.pub公钥文件，id_rsa私钥文件 scp远程文件拷贝,注意指定端口时-P 一定大写 scp -P port 1.py user@remote:/home/jiang/desktop/1.test 将本地文件复制到远程目录下 scp user@remote:/home/jiang/1.py 1.py 远程复制到本地 scp -r aaa user@remote:/home/jiang 复制目录，本地到远程 scp -r user @remote:/home/jiang aaa配置别名，ssh test直接登陆客户端.ssh目录下，创建config文件追加下面内容 Host test HostName 192.168.1.100 User jiang port 22保存即可，ssh test就能登陆了，scp同样适用用户权限相关命令 用户，组，其他用户，read 4 write 2 excute 1 硬链接数：有多少种方式访问当前的目录或文件 chmod +/- rwx 文件或目录名 或者chmod 777 文件或目录 组管理的命令都需要在root下执行 groupadd 组名 添加组 groupdel 组名 删除组 cat /etc/group 查看组 chgrp 组名 文件/目录名 修改文件/目录所属组eg: mkdir test 创建目录，所属组为jiang groupadd dev 创建一个组 cat /etc/group 查看组 sudo chgrp -R dev test 更改test目录组为dev 用户命令的管理创建用户，然后创建密码 useradd -m -g 组名 用户名 -m创建家目录，-g指定用户组，不加-g自动创建和用户名一样的组 sudo useradd -m -g test jiang test组创建用户jiang passwd 用户名 root权限下添加用户后需要设置密码， userdel -r 用户名删除用户，-r参数删除用户的家目录 cat /etc/passwd | grep 用户名 查看用户信息查看用户信息 id [用户名] 查看用户的UID和GID id jiang jiang:x:1000:1001::/home/jiang 1000用户id 1001组id who 查看当前所有登陆的用户列表 whoami 查看当前登陆用户的账户名usermod usermod 设置用户的主组/附加组和登陆shell 主组：一般新建用户时设定，在etc/passwd的第四列GID对应的组附加组:在etc/group中最后一列表示改组的用户列表 #修改用户的主组（passwd中的GID） usermod -g 组 用户名 #修改用户的附加组 usermod -G 组 用户名 #修改用户的登陆shell usermod -s /bin/bash 用户名which which ls /bin/ls which passwd /usr/bin/passwd /bin 二进制执行文件目录，主要用于具体应用 /sbin 系统管理员专用的二进制代码存放目录，用于系统管理 /usr/bin 后期用户自己安装的一些软件 /usr/sbin 超级用户的一些管理程序su su - 用户名 切换用户并到其家目录和shell环境 su 用户名 切换用户，还是原来的shell环境 exit 退出当前登陆用户，返回到上一个用户环境。修改文件权限 chown 修改拥有着 chgrp 修改用户组 chmod 修改用户权限 chown 用户名 文件/目录 chgrp -R 组名 文件/目录 递归修改所有文件权限 chmod +/- wrx 文件/目录 777 chmod -R 640 文件夹 修改文件夹下所有文件的权限系统相关命令date root下 date -s “2018-05-22 18:08:05”修改时间 当前日期 date +”%Y%m%d” 当前日期格式 date +”%Y-%m-%d” 注意：1.date后面必须有空格，date+”%Y%m%d”不可以2.加号后面不可以有空格！ date + “%Y%m%d”不可以3.加号后面的这个 单引号双引号或者都不加都可以 获取昨日时间 date -d “-1 day” 或者 date -d “1 day ago” 获取昨日日期 date -d “-1 day” +%Y%m%d 获取上个月、去年的日期、时间 date -d “-1 month” +%Y%m%dcal 默认查看月日历，-y查看一年的 cal 5 2018 查看固定年月的 cal 2018 显示2018年的df df -h 显示磁盘剩余空间df -a 查看全部文件系统df -t ext3 只显示ext3格式的fsdf -T 显示每个文件的系统类型 du du -h [目录名] 显示目录下文件大小du -s 显示总和大小du -ah 文件和目录都显示 进程相关 ps aux 查看进程详细情况 all u详细 x没有控制终端的进程 ps -ef | grep tom 查看tomcat进程 top 动态显示运行中的程序并排序 kill [-9] pid 终止程序，-9表示强行终止其他命令find查找指定目录下符合条件的文件 find [路径] -name “.py” 查找指定路径下扩展名为py的文件 如果没加路径，表示在当前文件夹下查找find -name “123*” lnlinux中文件名 和文件的数据是分开保存的，源文件删除后，软连接失效，硬链接有效。 软连接 ln -s 源文件 链接文件名 类似于快捷方式，没-s是硬链接，绝对路径，相对路径被移动目录后会爆错找不到。 硬链接 ln 源文件 链接文件名查看 ln -l 压缩解压tar 压缩 tar cvf 文件名.tar 被打包的文件或路径 解压 tar zxf 打包文件.tar c 创建 x 解开 v 过程 f指定文件名，f后一定是tar文件，需放最后gzip tar只负责打包，gzip负责压缩 压缩文件 tar -zcvf filename.tar.gz 被压缩的文件或路径 解压文件 tar -zxvf 打包文件.tar.gz 解压缩到指定路径 tar -zxvf 打包文件.tar.gz -C 路径注意-C 路径时，路径必须已经存在bzip2 tar打包，bzip2压缩 格式为XXXx.tar.bz2 d 压缩 tar -jcvf XXx.tar.bz2 被压缩的文件或路径 解压缩 tar -jxvf 打包文件.tar.bz2 解压缩到指定路径,加-C tar -jxvf 打包文件.tar.gz -C 路径]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell(一)流程控制、函数]]></title>
    <url>%2F2018%2F05%2F21%2Fshell(%E4%B8%80)%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E3%80%81%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[shell流程控制、函数1.if else elif#!/bin/bash a=10 b=20 if [ $a == $b ] then echo &quot;true&quot; fi if [ $a == $b] then echo &quot;true&quot; else echo &quot;false&quot; fi if [ $a == $b ] then echo &quot;a=b&quot; elif [ $a -gt $b] then echo &quot;a&gt;b&quot; elif [ $a -lt $b ] then echo &quot;a&lt;b&quot; else echo &quot;none is right&quot; fi 2.for#!/bin/bash for i in {1,5,85} do echo $i done for i in 5 6 7 43 do echo $i done for file in $HONE/.bash* do echo $file done 3.while#!/bin/bash int=1 while(($int&lt;=8)) do echo $int let &quot;int++&quot; done while [$int -lt 5] do int=`expr $int +1` echo $int done 无限循环while : do command done 4.until#!/bin/bash a=0 until [ ! $a -lt 10 ] do echo $a a=`expr $a+1` done 5.case#!/bin/bash echo &quot;输入1到4之间的数&quot; echo &quot;你输入的数字为&quot; read num case $num in 1) echo &quot;你输入的是1&quot; ;; 2) echo &quot;你输入的是2&quot; ;; 3) echo &quot;你输入的是3&quot; ;; 4) echo &quot;你输入的是4&quot; ;; *) echo &quot;你输入的不对&quot; ;; esac 6.跳出循环break终止循环#!/bin/bash while: do echo -n &quot;输入1到5之间的数字&quot; read num case $num in 1|2|3|4|5) echo &quot;你输入的数字是$num&quot; ;; *) echo &quot;你输入的不是1-5之间的&quot; break ;; esac done continue 跳出本次循环上述代码 break换成continue 不会结束 7.函数 定义: 可以funtion fun_name(){}也可以 fun(){}参数返回，加return返回，不加以最后一条命令运行结果作为返回值。 #!/bin/bash demo(){ echo &quot;test函数&quot; } demo #调用函数 return函数 #!/bin/bash funSum(){ echo &quot;输入第一个数字：&quot; read num1 echo &quot;输入第二个数字&quot; read num2 return $(($num1+$num2)) # return `expr $num1 + $num2` } funSum echo &quot;输入两个数字和为$?&quot; 函数参数 调用函数时可以向其传递参数，$n获取参数值$1第一个，$2第二个，$10不能获取第十个，用${10},当n&gt;=10时，需要用${n}来获取参数 #!/bin/bash fun(){ echo &quot;第一个参数 $1&quot; echo &quot;第二个参数 $2&quot; echo &quot;第十个参数 $10&quot; echo &quot;第十个参数 ${10}&quot; echo &quot;参数总数为$#&quot; echo &quot;一个字符串输出所有参数$*&quot; } fun 1 2 34 123 21 32 31 12 1 1 1 21 $#参数个数 $*单个字符串显示所有参数 $@使用时加引号，返回每个参数$? 函数返回值 8.调用另一个脚本#!/bin/bash . ./fun.sh or source ./fun.sh]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell(一)运算符、test]]></title>
    <url>%2F2018%2F05%2F20%2Fshell(%E4%B8%80)%E8%BF%90%E7%AE%97%E7%AC%A6_test%2F</url>
    <content type="text"><![CDATA[shell运算符、test运算符包含算数运算符、关系运算符、布尔运算符、字符串运算符、文件测试运算符原生bash不支持数学运算，可通过awk和expr #!/bin/bash val=`expr 2 + 2` #加好前后必须有空格 否则报错 echo &quot;和为：$val&quot; 1.算数运算符 运算符 说明 例子 + 加 expr $a + $b - 减 expr $a - $b * 乘 expr $a \* $b / 除 expr $a / $b % 取余 expr $a % $b = 赋值 a=$b 把变量b值赋给a == 相等，用于数字，返回true或者false if [$a == $b] != 不等，判断数字，返回true or false if [$a != $b] 注意 乘法*需要转义\,符号前后都要有空格 #!/bin/bash num1=10 num2=20 sum=`expr $num1 + $num2` min=`expr $num1 - $num2` cheng=`expr $num1 \* $num2` chu=`expr $num1 / $num2` yu=`expr $num1 % $num2` if [ $num1 == $num2 ] then echo &quot;num1=num2&quot; fi if[ $num1 != $num2] then echo &quot;num1 != num2&quot; fi 2.关系运算符关系运算符只支持数字，不支持string，除非字符串值是数字 运算符 说明 例子 -eq 是否相等，返回true或false [ $a -eq $b] -ne 是否不相等，返回true或false [ $a -ne $b] -gt 左边是否大于右边，返回true或false [ $a -gt $b] -ge 左边是否大于等于右边，返回true或false [ $a -ge $b] -lt 左边是否小于右边的，返回true或false [ $a -lt $b] -le 左边是否小于等于右边，返回true或false [ $a -le $b] #!/bin/bash a=100 b=200 if [ $a -gt $b ] #换哪个都行 then echo &quot;$a 大于 $b&quot; else echo &quot;$a 小于$b&quot; fi 3.布尔运算符 运算符 说明 举例 -a 与运算，表达式同时为真才是真 [ $a -lt 100 -a $b -le 200 ] -o 或运算，表达式有一个为真为真 [ $a -lt 100 -o $b -le 200] ! 非运算，表达式为真返回false，取反 [ !false ] 值为true #!/bin/bash num1=100 num2=200 if[ $num1 -le 101 -o $num2 -gt 300 ] then echo &quot;嚯嚯嚯嚯嚯嚯&quot; else echo &quot;假的&quot; fi 4.逻辑运算符 运算符 说明 举例 &amp;&amp; 逻辑and [ $a -lt 100 &amp;&amp; $b -le 200 ] &#124;&#124; 逻辑or [ $a -lt 100 -o $b -le 200] #!/bin/bash num1=100 num2=200 if[ $num1 -le 101 &amp;&amp; $num2 -gt 300 ] then echo &quot;嚯嚯嚯嚯嚯嚯&quot; else echo &quot;假的&quot; fi 5.字符串运算符 运算符 说明 例子 = 判断两个字符串是否相等， [ $a = $b ] 相等返回true != 判断两个字符串是否相等， [ $a != $b ] 不相等返回true -z 检测字符串长度是否为0， [ -z $a ] 是0返回true -n 检测字符串长度时候为0，不为0返回true [ -n “$a” ] 不为0返回true str 检测字符串是否为空，空false，不空true [ $a ]不空true a=&quot;asdasd&quot; if [ $a ] #字符串是否为空 then echo &quot;$a : 字符串不为空&quot; else echo &quot;$a : 字符串为空&quot; fi 6.文件测试运算符 运算符 说明 例子 -b file 检测文件是否块设备文件，是返回true [-b $file] 是返回true -e file 检测文件(包含目录)是否存在，是返回true [-e $file ] 存在返回true -f file 检测文件是否为普通文件(不是目录，也不是块文件)，是返回true [-e $file ] 存在返回true -s file 检测文件是否为空，大小是否大于0，不为空返回true [-s $file ]不为空返回true -r file 文件是否可读，是返回true [-w $file ]可读返回true -w file 文件是否可写，是返回true [-w $file ]可写返回true -x file 文件是否可执行，是返回true [-w $file ]可执行返回true -r file 文件是否可读，是返回true [-w $file ]可读返回true file=&quot;/home/jiang/test.sh&quot; if [ -r $file ] then echo &quot;文件可读&quot; else echo &quot;文件不可读&quot; fi test检测条件是否成立数值、字符、文件三个方面 数值测试-eq 等于为真 -ne不等为真 -gt -ge -lt -le num1=100 num2=100 if test $[num1] -eq $[num2] # if [ $num1 -eq $num2 ] then echo &quot;两个数相等&quot; else echo &quot;两个数不等&quot; fi 字符串测试=等于为真 !=不等为真 -z字符串长度为0为真 -n字符串长度不为0为真 num1=&quot;asdasd&quot; num2=&quot;qwerqw&quot; if test $num1 = $num2 then echo &apos;两个字符串相等!&apos; else echo &apos;两个字符串不相等!&apos; fi 文件测试 -e 文件名 存在为真-d 文件名 文件存在且为目录为真-f 文件名 文件存在且为普通文件为真-s 文件名 文件岑仔且至少有一个字符为真-b 文件名 文件存在且为块特殊文件为真-w -r -x 文件名 文件是否为刻度可写可执行为真 cd /bin if test -e ./bash then echo &apos;文件已存在!&apos; else echo &apos;文件不存在!&apos; fi]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell(一)变量_数组_传参_输出]]></title>
    <url>%2F2018%2F05%2F20%2Fshell(%E4%B8%80)%E5%8F%98%E9%87%8F_%E6%95%B0%E7%BB%84_%E4%BC%A0%E5%8F%82_%E8%BE%93%E5%87%BA%2F</url>
    <content type="text"><![CDATA[shell变量、字符串、数组、传参、输入输入1.shell简介 通常我们使用bash (bourne again shell)，因为bash免费而且简单。直接使用在win/Unix/Linux上面，并且可以调用大量系统内部的功能来解释执行程序， 2.shell工作原理 Shell可以被称作是脚本语言，因为它本身是不需要编译的，而是通过解释器解释之后再编译执行，和传统语言相比多了解释的过程所以效率会略差于传统的直接编译的语言。 3.变量第一个脚本vi test.sh创建第一个脚本 #!/bin/bash echo &quot;hello world&quot; cd 该目录下chmod 777 test.sh #给脚本执行权限 +x 也可以./test.sh #执行脚本 命名 英文、数字、下划线，首字符不以数字开头，中间不能有空格，可以下划线_ 不能有标点，不能有关键字。变量名和等号之间不能有空格可以直接=赋值，也可以语句赋值 for file in `ls /dev` do echo $file done 使用变量 定义使用的变量，在变量名前加美元符号$ 即可，可以使用{}识别边界，变量可以重复命名。 num=2 echo &quot;this is $num&quot; echo &quot;this is the $numnd&quot; # numnd 变量不存在 echo &quot;this is the ${num}nd&quot; #识别边界 只读变量 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变, #!bin/bash num=&quot;qweq&quot; readonly num num=&quot;asdd&quot; #重新赋值时会提示变量只读 删除变量 unset可以删除变量，但是不能删除只读变量 unset var_name 变量类型 局部变量：脚本或命令中定义，仅在shell中使用，其他shell程序不能访问局部变量 环境变量：脚本可以定义环境变量，程序运行需要环境变量来保证 shell变量：shell程序设置的特殊变量，一部分是环境变量，一部分是局部变量，变量保证了shell的正常运行 ##4.字符串string字符串可以用单引号，也可以用双引号，也可以不用引号。 ###单引号 str=’hello world’ 单引号原样输出，变量无效，单引中不能出现单引（转义无效） ###双引号 双引中可以有变量，可以有转义字符 a=&apos;qq&apos; str=&quot;hello \&quot;$a\&quot; !&quot; str1=&quot;hello $a&quot; echo str # hello &quot;qq&quot; echo str1 # hello qq 获取字符串长度echo ${#string} 查找字符串str=&quot;hello world jiang&quot; echo `expr index &quot;$str&quot; or` #必须有&quot;&quot; 否则报错 5.数组bash只支持一维数组，下标0开始，获取数组元素利用下标。 ###定义数组 array_name=(val0 val1 val2 val3) # 没有逗号 或者 array_name=( val0 val1 val2 val3 ) 或者单独定义各个分量，可以不使用连续的下标。下标范围没限制。 array_name[0]=value0 array_name[1]=value1 array_name[n]=valuen 读取数组读取数组一般格式为${arr_name[index]}使用@、*符号获取数组中所有元素 echo ${arr_name[@]} echo ${arr_name{*}} 获取数组长度echo ${#arr[@]} echo ${#arr[*]} echo ${#arr[n]} #获取单个数组元素长度 练习#!/bin/bash arr=(123 45643 7897 3213) for i in ${arr[*]} do echo ${#i} #打印个数 echo ${i} #打印每个元素 done 6.传参$n$0 脚本名 $1 第一个参数 $2 第二个参数 $3第三个参数 #!/bin/bash echo &quot;文件名为：$0&quot; echo &quot;第一个参数为:$1&quot; echo &quot;第二个参数为:$2&quot; ./test.sh start over 文件名为 ./test.sh 第一个参数为：start 第二个参数为：over $# $* $@#!/bin/bash echo &quot;参数个数为：$#&quot; for i in &quot;$*&quot; do echo $i done for i in &quot;$@&quot; do echo $i done 执行下脚本./canshu.sh 1 2 3 参数个数为：3 1 2 3 1 2 3 其他参数 参数 意义 $$ 显示进程ID号 $? 显示命令最后退出状态，0没错误，其他值表示有错误 $@ 所有参数$@为”$1””$2””$3” $* 所有参数$*为”$1 $2 $3..$n” $# 参数长度 7.输出echo打印普通字符串echo &quot;test&quot; echo test # 双引号可以省略 显示转义字符echo &quot;\&quot;test\&quot;&quot; #&quot;test&quot; echo \&quot;test\&quot; #&quot;test&quot; 显示变量#!/bin/bash read name #从键盘中读取变量 echo &quot;$name welcome&quot; 显示换行/不换行echo -e &quot;ok \n&quot; echo -e &quot;ok \c&quot; #-e转义 \c 不换行 echo asdads #和ok在一行 显示结果到指定文件echo &quot;test result&quot; &gt; test.sh 原样输出字符串，不进行转义或者取变量（用单引号）echo &apos;$name&apos; # 输出结果为 $name 显示命令执行结果echo `date` #注意是反引号 8.读取read read 接收输入的参数，参数用空格进行分隔；如果输入的词组个数大于需要的参数个数，则多出的词组将被作为整体为最后一个参数接收。 read first second echo 第一个：$first 第二个：$second 如果超出参数长度./test.sh 1 2 3 4执行结果为 第一个：1 第二个：2 3 4参数说明-p 提示文字-n 字符长度限制，到指定位数自动结束-t 输入限时-s 隐藏输入内容 read -p &quot;请输入密码&quot; -n 6 -t 5 -s pass echo password is $pass 9.输出printfecho自带换行 printf “hello \n”手动加 格式替代符%d %s %c %f 替代符 说明 例子 d 十进制 s 字符串或字符型，否则报错 %-10s 宽度十字符-左对齐 c char字符型或字符 f float浮点，参数是数字型 %-4.2f .2指保留2位小数 其中最后一个参数是 “def”，%c 自动截取字符串的第一个字符作为结果输出。$ printf “%d %s %c\n” 1 “abc” “def” printf &quot;%-10s %-8s %-4s\n&quot; 姓名 性别 体重kg printf &quot;%-10s %-8s %-4.2f\n&quot; asd 男 12.12 printf转义序列\n换行 \r回车 \f 换页 \b后退]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown语法]]></title>
    <url>%2F2018%2F04%2F20%2Fmarkdown%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[标题一级标题二级标题三级标题一级标题二级标题列表无序列表(+-*) 1 2 3 1 2 3 1 2 3 有序列表(数字加.) 列表一 列表二 列表三 列表四（这里注意数字并不对应） 区块引用 不以结婚为目的的恋爱都叫耍流氓 这是毛主席说的 标题 不以结婚为目的的 毛主席说的 前方高能 热爱刺激了 一级引用 二级引用 三级的 四级的 七级的 代码例子 protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); } 分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以 哈哈上标TM 哈哈下标 自动创建链接&#56;&#x35;&#52;&#x36;&#x35;&#x37;&#x38;&#56;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d; 标注一[^5] 标注二[^3] and a definition[^qq]. [^5]: This is a footnote[^3]: A footnote on “label”[^qq]: The definition of a footnote. 强调加粗 加粗斜体 _斜体_加粗+斜体加粗+斜体删除文本 图片和链接图片与链接的语法很像，区别在一个 ! 号。二者格式： 图片：![]() ![图片文本(可忽略)](图片地址) 链接：[]() [链接文本](链接地址) 链接又分为行内式、参考式和自动链接 行内式[blog](http://s85465788.github.io) 参考式[blog][url]该url为链接标记，置于文中任意位置 自动链接：直接用&lt;&gt;括起来&lt;http://www.baidu.com&gt; blog http://www.baidu.com 这是图片： 插入图片带有链接 [][5][5]: http://www.baidu.com 代码 代码块代码分为行内代码块和代码块 行内：这是行内document.getElementById的例子 代码块使用四个空格或1234567``` javascriptvar num = 0;for (var i = 0; i &lt; 5; i++) &#123; num+=i;&#125;console.log(num); 表格对齐格式 居左::---- 居中: :----:或----- 居右: ----: 默认左对齐:- 左对齐-:右对齐:-:居中-表示列的宽度权重，比如如下，–、-，表示第一列的宽度是第二列的俩倍 左标题 中间标题 右标题 居左文本 居中文本 居右测文本 居左文本1 居中文本2 居右文本3 支持css内嵌样式代码 内联样式 公式注：一个$左对齐，两个居中 $$ x \href{why-equal.html}{=} y^2 + 1 $$$ x = {-b \pm \sqrt{b^2-4ac} \over 2a}. $]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[九桥全同步]]></title>
    <url>%2F2018%2F04%2F10%2F%E4%B9%9D%E6%A1%A5%E5%85%A8%E5%90%8C%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[dds用户修改web错误日志mv msg.err msg.err20180412 巡检df -hvshms -p 进程运行状态-m 用户状态-c软件运行时间点目标端只有-p -c日志 web端ds目录下dds_pweb -q 退出dds_pweb -s 打开源端dds_pweb -t 打开目标端 正常关闭：（可以增量同步）关源端ddstop 目标端ddstop开源端ddstart 开目标端ddstart 全同步：关源端ddstop 目标端ddstop源端ddclean 目标端ddclean开源端ddstart 开目标端ddstart map_start(开始全同步)vs（源端实时日志） vt（目标端实时日志） 源端 192.168.1.101目标端 192.168.1.99]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>dds</tag>
      </tags>
  </entry>
</search>
