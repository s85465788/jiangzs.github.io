<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>python基础-(四) 函数、列表、元组、字典、字符串、切片</title>
      <link href="/2018/10/11/python%E5%9F%BA%E7%A1%80-(%E5%9B%9B)%20%E5%87%BD%E6%95%B0%E3%80%81%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2018/10/11/python%E5%9F%BA%E7%A1%80-(%E5%9B%9B)%20%E5%87%BD%E6%95%B0%E3%80%81%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>所谓<strong>函数</strong>，就是把 <strong>具有独立功能的代码块</strong> 组织为一个小模块，在需要的时候 <strong>调用</strong></li><li>函数的使用包含两个步骤：<ol><li>定义函数 —— <strong>封装</strong> 独立的功能</li><li>调用函数 —— 享受 <strong>封装</strong> 的成果</li></ol></li><li><strong>函数的作用</strong>，在开发程序时，使用函数可以提高编写的效率以及代码的 <strong>重用</strong></li><li>调用py文件里的函数 import 文件名 文件名.函数名即可<h2 id="函数定义和调用"><a href="#函数定义和调用" class="headerlink" title="函数定义和调用"></a>函数定义和调用</h2></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    函数封装的代码</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ss = <span class="string">"jiang"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"hello %s"</span>%ss)</span><br><span class="line"></span><br><span class="line">name()</span><br></pre></td></tr></table></figure><ol><li>命名要体现功能，符合命名规则<ul><li>函数名由字母、下划线、数字组成</li><li>不能数字开头，不能与关键字重名</li></ul></li><li>调用： <code>函数名()</code> 即可完成对函数的调用</li></ol><ul><li>shift+ f10执行 shift+f9 调试 f8下一步 f7进入函数下一步</li><li>函数必须先定义 后调用，即调用在定义下面 否则undefined</li><li>函数注释使用””””dss””” ctrl+q快速查看函数注释<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2>函数是<strong>具有独立功能的代码块</strong> 参数增加多元性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a,b)</span>:</span></span><br><span class="line"><span class="comment">#a = 10</span></span><br><span class="line"><span class="comment">#b = 20</span></span><br><span class="line">res = a + b</span><br><span class="line">print(<span class="string">"%d+%d=%d"</span>%(a,b,res))</span><br><span class="line">sum(<span class="number">10</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure><ul><li>定义时括号内的是形参，形式上的参数，调用传递的是实参，实际值</li><li><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2></li><li><strong>返回值</strong> 是函数 <strong>完成工作</strong>后，<strong>最后</strong> 给调用者的 <strong>一个结果</strong></li><li>使用 <code>return</code> 关键字可以返回结果，<strong>return后的代码都不会被执行</strong></li><li>调用函数一方，可以 <strong>使用变量</strong> 来 <strong>接收</strong> 函数的返回结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(num1,num2)</span>:</span></span><br><span class="line"><span class="keyword">return</span> num1 + num2</span><br><span class="line">print(<span class="string">"这里并不会被执行哦"</span>)</span><br><span class="line">res = sum(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">print(<span class="string">"结果还是%d"</span>%res)</span><br></pre></td></tr></table></figure><h2 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h2><p>一个函数里面 <strong>又调用</strong> 了 <strong>另外一个函数</strong>，这就是 <strong>函数嵌套调用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"ok"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"111"</span>)</span><br><span class="line">fun1()</span><br><span class="line">fun2()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">money</span><span class="params">(num,price)</span>:</span></span><br><span class="line"><span class="keyword">return</span> num*price</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apple</span><span class="params">()</span>:</span></span><br><span class="line">num = float(input(<span class="string">"输入苹果斤数："</span>))</span><br><span class="line">price = float(input(<span class="string">"输入苹果单价："</span>))</span><br><span class="line">print(<span class="string">"单价为：%2d,斤数为：%.2f，总价为：%4f"</span>%(price,num,money(num,price)))</span><br><span class="line"></span><br><span class="line">apple()</span><br></pre></td></tr></table></figure><h2 id="使用模块中的函数"><a href="#使用模块中的函数" class="headerlink" title="使用模块中的函数"></a>使用模块中的函数</h2><ul><li><strong>模块</strong> 就好比是 <strong>工具包</strong>，要想使用这个工具包中的工具，就需要 <strong>导入 import</strong> 这个模块</li><li>每一个以扩展名 <code>py</code> 结尾的 <code>Python</code> 源代码文件都是一个 **模块</li><li><code>模块名.变量</code> / <code>模块名.函数</code> 的方式，使用这个模块中定义的变量或者函数</li><li>命名复核命名规范，<strong>以数字开头</strong> 是无法在 <code>PyCharm</code> 中通过导入这个模块。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> money</span><br><span class="line">money.num=<span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="pyc文件"><a href="#pyc文件" class="headerlink" title="pyc文件"></a>pyc文件</h2><ul><li><code>compiled</code> <strong>编译过</strong> 的意思， <code>__pycache__</code> 的目录.pyc 文件，由 Python 解释器将 <strong>模块的源码</strong> 转换为 <strong>字节码</strong>，启动 <strong>速度的优化</strong>  </li><li><code>Python</code> 在解释源程序时是分成两个步骤的<ol><li>首先处理源代码，<strong>编译</strong> 生成一个二进制 <strong>字节码</strong></li><li>再对 <strong>字节码</strong> 进行处理，才会生成 CPU 能够识别的 <strong>机器码</strong></li></ol></li><li>有了pyc文件后，下次执行时会跳过编译这个步骤。<h1 id="列表list"><a href="#列表list" class="headerlink" title="列表list"></a>列表list</h1></li><li>专门用于存储 <strong>一串 信息</strong>，用 <code>[]</code> 定义，<strong>数据</strong> 之间使用 <code>,</code> 分隔，<strong>索引</strong> 从 <code>0</code> 开始<blockquote><p>注意：从列表中取值时，如果 <strong>超出索引范围</strong>，程序会报错</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="string">"wangwu"</span>]</span><br></pre></td></tr></table></figure><h2 id="列表常见方法"><a href="#列表常见方法" class="headerlink" title="列表常见方法"></a>列表常见方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python&gt;&gt;&gt; name_list.</span><br><span class="line">name_list.append   name_list.count    name_list.insert   name_list.reverse</span><br><span class="line">name_list.clear    name_list.extend   name_list.pop      name_list.sort</span><br><span class="line">name_list.copy     name_list.index    name_list.remove</span><br></pre></td></tr></table></figure><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><ul><li>insert，list.insert(索引，数据)  在指定位置插入数据</li><li>append list.append(数据)   在末尾插入数据，</li><li>extend list.extend(列表2)  合并列表<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3></li><li>list[索引] = 值 修改指定索引的数据<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3></li><li>del list[index] 删除指定索引的数据 将变量从内存中删除，后续代码不可在使用。</li><li>remove list.remove[数值] 删除列表中第一个出现的指定数据</li><li>pop list.pop()  删除列表最后一个数据 list.pop(index)删除指定索引的数据</li><li>clear list.clear() 清空列表<h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3></li><li>len  len(list名)   列表长度</li><li>count list.count(值)  统计数据在列表中出现的次数<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3></li><li>sort list.sort()   升序</li><li>list.sort(reverse=true) 降序</li><li>list.reverse() 逆序，顺序反过来<h2 id="关键字、函数、方法"><a href="#关键字、函数、方法" class="headerlink" title="关键字、函数、方法"></a>关键字、函数、方法</h2></li><li><strong>关键字</strong> 是 Python 内置的、具有特殊意义的标识符，关键字后面不需要使用括号 </li><li><strong>函数</strong> 封装了独立功能，可以直接调用</li><li><strong>方法</strong> 需要通过 <strong>对象</strong> 来调用，表示针对这个 <strong>对象</strong> 要做的操</li></ul><h2 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h2><ul><li><strong>遍历</strong> 就是 <strong>从头到尾</strong> <strong>依次</strong> 从 <strong>列表</strong> 中获取数据<ul><li>在 <strong>循环体内部</strong> 针对 <strong>每一个元素</strong>，执行相同的操作   </li></ul></li><li>在 <code>Python</code> 中为了提高列表的遍历效率，专门提供的 <strong>迭代 iteration 遍历</strong>，使用 <code>for</code> 就能够实现迭代遍历</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 循环内部使用的变量 in 列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name_list:</span><br><span class="line">    循环内部针对列表元素进行操作</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><blockquote><p>通过 <strong>迭代遍历</strong>，在循环体内部，针对列表中的每一项元素，执行相同的操作</p></blockquote><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><ul><li><code>tuple</code>与列表相似，区别在于元组<strong>数据不可以被修改</strong></li><li>可以存放多个元素，用<code>,</code>分开，用()定义，索引从0开始</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple = (<span class="string">"jiang"</span>,<span class="number">27</span>,<span class="number">1.78</span>)</span><br></pre></td></tr></table></figure><h2 id="创建空元组"><a href="#创建空元组" class="headerlink" title="创建空元组"></a>创建空元组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tup = ()</span><br></pre></td></tr></table></figure><p>元组中只有一个元素时，需要在元素后添加<code>,</code>不加的话类型就是str or int，加了就是元组类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple = (ss,)</span><br></pre></td></tr></table></figure><h2 id="遍历元组"><a href="#遍历元组" class="headerlink" title="遍历元组"></a>遍历元组</h2><ul><li>取值时指定位置的值，遍历是从头到尾依次获取数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="string">"jiang"</span>,<span class="number">27</span>，<span class="number">1.78</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tup</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><blockquote><p>for in 可以遍历 列表 元组 字典 字符串，实际开发中，元组遍历不多，除非能确认元组中的数据类型。</p></blockquote><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li><strong>格式字符串</strong>，格式化字符串后面的 <code>()</code> 本质上就是一个元组</li><li><strong>让列表不可以被修改</strong>，以保护数据安全</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">info = (<span class="string">"jiang"</span>, <span class="number">27</span>)</span><br><span class="line">print(<span class="string">"%s 的年龄是 %d"</span> % info)</span><br></pre></td></tr></table></figure><h2 id="元组列表之间的切换"><a href="#元组列表之间的切换" class="headerlink" title="元组列表之间的切换"></a>元组列表之间的切换</h2><ul><li>使用<code>list</code>把元组转成列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(元组名)</span><br></pre></td></tr></table></figure><ul><li>使用<code>tuple</code>函数把列表转换成元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple(列表)</span><br></pre></td></tr></table></figure><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><ul><li>字典是除list意外最常用的数据类型，可以存储<strong>多个数据</strong>，通常存储<strong>描述一个物体的相关信息</strong></li><li>使用{}定义，存储数据时采用无序集合，而列表时有序集合</li><li>键值对key是索引，value是值，键值用<code>：</code>分开，数据用<code>，</code>分开</li><li>key值必须是唯一的，只能使用 <strong>字符串</strong>、<strong>数字</strong>或 <strong>元组</strong>。值可以是任意数据类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xiaoming = &#123;<span class="string">"name"</span>: <span class="string">"小明"</span>,</span><br><span class="line">            <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="string">"sex"</span>: <span class="keyword">True</span>,</span><br><span class="line">            <span class="string">"height"</span>: <span class="number">1.75</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="字典常用的操作"><a href="#字典常用的操作" class="headerlink" title="字典常用的操作"></a>字典常用的操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [1]: xiaoming.</span><br><span class="line">xiaoming.clear       xiaoming.items       xiaoming.setdefault</span><br><span class="line">xiaoming.copy        xiaoming.keys        xiaoming.update</span><br><span class="line">xiaoming.fromkeys    xiaoming.pop         xiaoming.values</span><br><span class="line">xiaoming.get         xiaoming.popitem</span><br></pre></td></tr></table></figure><ul><li>取值 print(xiaoming[“age”])</li><li>增加修改，key值存在即修改，不存在就是添加 xiaoming[“age”] = 27</li><li>删除 xiaoming.pop(“name”) key值不存在时会报错</li><li>统计键值对数量 len(xiaoming)</li><li>合并字典 tem = {“hobby”:play} xiaoming.update(tem)如果tem存在之前的key值，会更新该key的val值</li><li>清空 xiaoming.clear()</li></ul><h2 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h2><ul><li>就是 <strong>依次</strong> 从 <strong>字典</strong> 中获取所有键值对</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\<span class="comment"># for i in dict i就是key值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xiaoming:</span><br><span class="line">print(<span class="string">"%s:%s"</span>%(i,xiaoming[i]))</span><br></pre></td></tr></table></figure><h2 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>使用 <strong>多个键值对</strong>，存储 <strong>描述一个 <code>物体</code> 的相关信息</strong> —— 描述更复杂的数据信息</li><li>将 <strong>多个字典</strong> 放在 <strong>一个列表</strong> 中，再进行遍历，在循环体内部针对每一个字典进行 <strong>相同的处理</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">card_list = [&#123;<span class="string">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">              <span class="string">"qq"</span>: <span class="string">"12345"</span>,</span><br><span class="line">              <span class="string">"phone"</span>: <span class="string">"110"</span>&#125;,</span><br><span class="line">             &#123;<span class="string">"name"</span>: <span class="string">"李四"</span>,</span><br><span class="line">              <span class="string">"qq"</span>: <span class="string">"54321"</span>,</span><br><span class="line">              <span class="string">"phone"</span>: <span class="string">"10086"</span>&#125;</span><br><span class="line">             ]</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><ul><li><strong>字符串</strong> 就是 <strong>一串字符</strong>，是编程语言中表示文本的数据类型</li><li>可以一对双引或一对单引来定义一个字符串，</li><li>如果字符串内部需要使用 <code>&quot;</code>，可以使用 <code>&#39;</code> 定义字符串</li><li>如果字符串内部需要使用 <code>&#39;</code>，可以使用 <code>&quot;</code> 定义字符串<h2 id="字符串常用操作"><a href="#字符串常用操作" class="headerlink" title="字符串常用操作"></a>字符串常用操作</h2></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [1]: hello_str.</span><br><span class="line">hello_str.capitalize    hello_str.isidentifier  hello_str.rindex</span><br><span class="line">hello_str.casefold      hello_str.islower       hello_str.rjust</span><br><span class="line">hello_str.center        hello_str.isnumeric     hello_str.rpartition</span><br><span class="line">hello_str.count         hello_str.isprintable   hello_str.rsplit</span><br><span class="line">hello_str.encode        hello_str.isspace       hello_str.rstrip</span><br><span class="line">hello_str.endswith      hello_str.istitle       hello_str.split</span><br><span class="line">hello_str.expandtabs    hello_str.isupper       hello_str.splitlines</span><br><span class="line">hello_str.find          hello_str.join          hello_str.startswith</span><br><span class="line">hello_str.format        hello_str.ljust         hello_str.strip</span><br><span class="line">hello_str.format_map    hello_str.lower         hello_str.swapcase</span><br><span class="line">hello_str.index         hello_str.lstrip        hello_str.title</span><br><span class="line">hello_str.isalnum       hello_str.maketrans     hello_str.translate</span><br><span class="line">hello_str.isalpha       hello_str.partition     hello_str.upper</span><br><span class="line">hello_str.isdecimal     hello_str.replace       hello_str.zfill</span><br><span class="line">hello_str.isdigit       hello_str.rfind</span><br></pre></td></tr></table></figure><h3 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h3><ul><li>string.isspace()  string中只包含空格，返回true</li><li>string.isalnum()  string中至少有一个字符，并且所有字符后市字母或数字，返回true</li><li>string.isalpha() string至少有一个字符，并且都是字母返回true</li><li>string.isdecimal() string中只包含<code>全角数字</code> 数字，返回true</li><li>string.isdigital() string中只包含<code>全角数字</code>、<code>⑴</code>、<code>\u00b2</code>数字，返回true</li><li>string.isnumeric()string 只包含数字则返回 True，<code>全角数字</code>，<code>汉字数字</code> </li><li>string.istitle() string是标题化的(每个单词首字母大写)返回true</li><li>string.islower() string至少包含一个区分大小写字符，包含的单词都是小写为true</li><li>string.isupper() string包含至少一个区分大小写字符，并且区分的字符都是大写返回true</li></ul><h3 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h3><ul><li>string.startwith(str) 检查字符是否以str开头，是返回true</li><li>string.endwith(str)检查字符串是否以str结束，是则返回true</li><li>string.find(str,start=0,end=len(string)) 检查str是否在string中，从0开始到结尾，是返回索引值，不是为-1</li><li>string.rfind(str,start=0,end=5)类似find，从右侧开始</li><li>string.index(str,start=0,end=len(string))查索引值，不存在报错</li><li>string.rindex(str,start=0,end=(10))同上，从右侧开始</li><li>string.replace(old,new,num=5)替换字符串，如果num限制替换次数</li></ul><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><ul><li>string.capitalize() 字符串首字符大写</li><li>string.title() 字符串每个单词首字母大写</li><li>string.lower() 字符串中所有大写字符转小写</li><li>string.upper() 字符串中所有小写转大写</li><li>string.swapcase() 字符串中大小写翻转</li></ul><h3 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h3><ul><li>string.ljust(width) 返回一个新字符串左对齐，空格填充至width</li><li>string.rjust(width) 返回一个新字符串👉对齐，空格填充至width</li><li>string.center(width) 返回一个新字符串居中，并使用空格填充至width</li></ul><h3 id="去除空白字符"><a href="#去除空白字符" class="headerlink" title="去除空白字符"></a>去除空白字符</h3><ul><li>string.lstrip() 去掉string左边开始的空白字符</li><li>string.rstrip() 去掉string右边开始的空白字符</li><li>string.strip() 去掉string左右两边的空白字符</li></ul><h3 id="拆分连接"><a href="#拆分连接" class="headerlink" title="拆分连接"></a>拆分连接</h3><ul><li>string.partition(str) 把string分成3元素的元组，(str前，str，str后)</li><li>string.rpartition(str)把string从右侧开始分成三元素元组</li><li>string.splite(str=” “,num)以str为分隔符拆分string，如果num有值，分为num+1个字符串，str默认包含<code>\r</code>,<code>\t</code>,<code>\n</code>和空格</li><li>string.splitelines() 按照行(<code>\r</code>,<code>\n</code>,<code>\r\n</code>)分隔，返回一个包含各行作为元素的列表</li><li>string.join(seq) 以string作为分隔符。将seq中所有元素合并为一个新字符串</li></ul><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><ul><li>切片适用于 <strong>字符串</strong> <strong>列表</strong> <strong>元组</strong></li><li>使用索引值切，能获取有序列表集合，所以字典不可以。键值对就好了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串[开始索引:结束索引:步长]</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>区间属于 <strong>左闭右开</strong> 型，从 <code>起始</code> 位开始，到 <strong><code>结束</code>位的前一位</strong> 结束（<strong>不包含结束位本身</strong>)  </li><li>从头开始，<strong>开始索引</strong> <strong>数字可以省略，冒号不能省略</strong>  </li><li>到末尾结束，<strong>结束索引</strong> <strong>数字可以省略，冒号不能省略</strong>  </li><li>步长默认为 <code>1</code>，如果连续切片，<strong>数字和冒号都可以省略</strong>   </li><li>从右开始切：最右边的索引值是 <strong>-1</strong>，依次递减 步数为-1</li></ol><p>num = “0123456789”</p><ol><li>截取2-5的字符串 num[2:6]</li><li>截取2-末尾的字符串 num[2:]</li><li>截取开始到2的字符串 num[:3]</li><li>截取完整字符串  num[:]</li><li>从开始位置每隔一个字符截取  num[::2]</li><li>从索引1开始，每隔一个字符截取字符串 num[1::2]</li><li>截取最后一个字符 num[-1]</li><li>截取2-末尾的字符串 num[2:-1]</li><li>截取末尾两个字符串 num [-2:]</li><li>字符串逆序 num[::-1]</li></ol>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python基础-(三) if、while、break、continue</title>
      <link href="/2018/10/10/python%E5%9F%BA%E7%A1%80-(%E4%B8%89)%20if%E3%80%81while%E3%80%81for/"/>
      <url>/2018/10/10/python%E5%9F%BA%E7%A1%80-(%E4%B8%89)%20if%E3%80%81while%E3%80%81for/</url>
      <content type="html"><![CDATA[<h1 id="if"><a href="#if" class="headerlink" title="if"></a>if</h1><h2 id="if的基本语法"><a href="#if的基本语法" class="headerlink" title="if的基本语法"></a>if的基本语法</h2><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件：  </span><br><span class="line">条件成立，执行</span><br></pre></td></tr></table></figure><p>注意缩进一个tab，或四个空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = int(input(<span class="string">"请输入年纪："</span>))</span><br><span class="line"><span class="keyword">if</span> age !=<span class="number">18</span>:</span><br><span class="line">print(<span class="string">"不是18"</span>)</span><br><span class="line">print(<span class="string">"到这是if的代码块"</span>)</span><br><span class="line">print(<span class="string">"这是最后无论怎样都会执行的，不再if中"</span>)</span><br></pre></td></tr></table></figure><h2 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件：</span><br><span class="line">条件成立时执行的代码</span><br><span class="line">esle:</span><br><span class="line">条件不成立，要做的</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">age = input(<span class="string">"请输入年纪"</span>)</span><br><span class="line"><span class="keyword">if</span> age == <span class="number">18</span>:</span><br><span class="line">print(<span class="string">"ok"</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">18</span>:</span><br><span class="line">print(<span class="string">"smaller"</span>)</span><br><span class="line">esle:</span><br><span class="line">print(<span class="string">"bigger"</span>)</span><br><span class="line"><span class="comment">## 逻辑运算</span></span><br><span class="line"><span class="keyword">and</span> <span class="keyword">or</span> <span class="keyword">not</span></span><br><span class="line"><span class="comment">### and</span></span><br><span class="line"><span class="keyword">and</span>两边同时成立则为真，否则执行<span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">age = <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">0</span> <span class="keyword">and</span> age &lt;<span class="number">110</span></span><br><span class="line">print(<span class="string">"ok"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"not ok"</span>)</span><br></pre></td></tr></table></figure><h3 id="or"><a href="#or" class="headerlink" title="or"></a>or</h3><p>or两边有一个成立为真，就为真</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">score1 = <span class="number">20</span></span><br><span class="line">score2 = <span class="number">80</span></span><br><span class="line"><span class="keyword">if</span> score1 &gt; <span class="number">60</span> <span class="keyword">or</span> score2 &gt;<span class="number">60</span>:</span><br><span class="line">print(<span class="string">"ok"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"gg"</span>)</span><br></pre></td></tr></table></figure><h3 id="not"><a href="#not" class="headerlink" title="not"></a>not</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aa = [<span class="string">'jiang'</span>,<span class="string">'wang'</span>,<span class="string">'sss'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'sss'</span> <span class="keyword">not</span> <span class="keyword">in</span> aa :</span><br><span class="line">print(<span class="string">'no'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'ojbk'</span>)</span><br></pre></td></tr></table></figure><h2 id="elif"><a href="#elif" class="headerlink" title="elif"></a>elif</h2><p>多个条件时，可以用elif，格式为</p><blockquote><p>d<br>if 条件1 ：<br>    执行111<br>elif 条件2 ：<br>    执行222<br>elif 条件3 :<br>    执行333<br>else:<br>    都不符合执行的。。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">18</span>:</span><br><span class="line">print(<span class="string">"caida"</span>)</span><br><span class="line"><span class="keyword">elif</span> age == <span class="number">18</span>:</span><br><span class="line">print(<span class="string">"ok"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"young"</span>)</span><br></pre></td></tr></table></figure><h2 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h2><blockquote><p>d<br>if 条件1：<br>    执行的<br>    if 条件1满足基础上的条件2：<br>        条件2执行的代码<br>    else:<br>        不满足2时执行的代码<br>else:<br>    不满足条件1时执行的代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span></span><br><span class="line">high = <span class="number">130</span></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">10</span>:</span><br><span class="line">print(<span class="string">"可以进入大门"</span>)</span><br><span class="line"><span class="keyword">if</span> high &gt; <span class="number">120</span>:</span><br><span class="line">print(<span class="string">"您身高为%d，可以站着看比赛"</span>%high)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"不可以观看"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"不可以进入大门"</span>)</span><br></pre></td></tr></table></figure><h2 id="剪刀石头布"><a href="#剪刀石头布" class="headerlink" title="剪刀石头布"></a>剪刀石头布</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">you = int(input(<span class="string">"请输入剪刀（1）石头（2）布（3）:"</span>))</span><br><span class="line">com = random.randint(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">print(<span class="string">"你输入的是%d，电脑是%d"</span>%(you,com))</span><br><span class="line"><span class="keyword">if</span> (you == <span class="number">1</span> <span class="keyword">and</span> com == <span class="number">3</span> ) <span class="keyword">or</span> (you == <span class="number">2</span> <span class="keyword">and</span> com == <span class="number">1</span>) <span class="keyword">or</span> (you == <span class="number">3</span> <span class="keyword">and</span> com ==<span class="number">2</span>):</span><br><span class="line">    print(<span class="string">"you win"</span>)</span><br><span class="line"><span class="keyword">elif</span> you == com:</span><br><span class="line">    print(<span class="string">"he"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"loser"</span>)</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li><p>算术运算符</p><blockquote><p>+ - * / // % **  </p></blockquote></li><li><p>关系运算符</p><blockquote><p>== != &gt; &gt;= &lt; &lt;=</p></blockquote></li><li><p>逻辑运算符</p><blockquote><p>and or not</p></blockquote></li></ul><p>*赋值运算符</p><blockquote><p>= += -+ *= /= //= %= **=</p></blockquote><ul><li>运算符优先级</li></ul><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>幂 (最高优先级)</td></tr><tr><td>* / % //</td><td>乘、除、取余数、取整除</td></tr><tr><td>+ -</td><td>加法、减法</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>== !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += *= **=</td><td>赋值运算符</td></tr><tr><td>not or and</td><td>逻辑运算符</td></tr></tbody></table><h1 id="while"><a href="#while" class="headerlink" title="while"></a>while</h1><p>常用的应用场景就是 <strong>让执行的代码</strong> 按照 <strong>指定的次数</strong> <strong>重复</strong> 执行</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">初始条件设置 如num=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> 条件(判断 计数器 是否达到 目标次数):</span><br><span class="line">    条件满足时，做的事情<span class="number">1</span></span><br><span class="line">    处理条件(计数器 + <span class="number">1</span>) <span class="comment">#这里很关键哦</span></span><br></pre></td></tr></table></figure><ul><li><code>while</code> 语句以及缩进部分是一个 <strong>完整的代码块</strong></li><li>死循环：<strong>忘记</strong> 在循环内部 <strong>修改循环的判断条件</strong>，</li><li>计数一般从0开始。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">0</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= <span class="number">100</span>:</span><br><span class="line">res += num</span><br><span class="line">num++</span><br><span class="line">print(<span class="string">"1-100和为%s"</span>%res)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\<span class="comment">#1-100偶数</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= <span class="number">100</span>:</span><br><span class="line"><span class="keyword">if</span> num %<span class="number">2</span> == <span class="number">0</span></span><br><span class="line">print(num)</span><br><span class="line">num += <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="break-continue"><a href="#break-continue" class="headerlink" title="break continue"></a>break continue</h1><ul><li>break 跳出循环，不执行后面代码</li><li>continue 跳出本次循环，不执行后面代码，但是执行循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line"><span class="keyword">if</span> i ==<span class="number">5</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">print(i)</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">print(<span class="string">"gg"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">contiune</span><br><span class="line"></span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><h2 id="while-循环嵌套"><a href="#while-循环嵌套" class="headerlink" title="while 循环嵌套"></a>while 循环嵌套</h2><ul><li><code>while</code> 嵌套就是：<code>while</code> 里面还有 <code>while</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件 <span class="number">1</span>:</span><br><span class="line">    条件满足时，做的事情<span class="number">1</span></span><br><span class="line">    条件满足时，做的事情<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> 条件 <span class="number">2</span>:</span><br><span class="line">        条件满足时，做的事情<span class="number">1</span></span><br><span class="line">        处理条件 <span class="number">2</span></span><br><span class="line">    处理条件 <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\<span class="comment">#打印*</span></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= <span class="number">9</span>:</span><br><span class="line">    col = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> col &lt; num:</span><br><span class="line">        print(<span class="string">"*"</span>,end=<span class="string">" "</span>)</span><br><span class="line">        col += <span class="number">1</span></span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    num += <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\<span class="comment">#打印99乘法表</span></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= <span class="number">9</span>:</span><br><span class="line">    col = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> col &lt;= num:</span><br><span class="line">        print(<span class="string">"%d * %d = %d"</span>%(col,num,col*num),end=<span class="string">"\t"</span>)</span><br><span class="line">        col += <span class="number">1</span></span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    num += <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>\\</td><td>反斜杠符号</td></tr><tr><td>\‘</td><td>单引号</td></tr><tr><td>\“</td><td>双引号</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\t</td><td>横向制表符</td></tr><tr><td>\r</td><td>回车</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python基础-(二) 注释、运算符、变量</title>
      <link href="/2018/10/08/python%E5%9F%BA%E7%A1%80-(%E4%BA%8C)%20%E6%B3%A8%E9%87%8A%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E5%8F%98%E9%87%8F/"/>
      <url>/2018/10/08/python%E5%9F%BA%E7%A1%80-(%E4%BA%8C)%20%E6%B3%A8%E9%87%8A%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>以<code>#</code>开头，符号右边的都被当成说明文字，起到辅助作用</p><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><blockquote><p><code>#</code> 这是单行注释，这行都是注释内容，下面才是程序<br>print(“hello jiang”)<br>也可以放在代码的后面，最好加两个空格<br>print(“hello me”)  #这里是注释</p></blockquote><h2 id="多行注释（块注释）"><a href="#多行注释（块注释）" class="headerlink" title="多行注释（块注释）"></a>多行注释（块注释）</h2><p>注释信息多，一行显示不下，就用多行注释 一对<strong>连续的三个引号</strong><br><strong>示例：</strong></p><blockquote><p>“””<br>这里是i注释哦<br>这里也是<br>哈哈哈<br>“””</p></blockquote><h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><h2 id="01-算数运算符"><a href="#01-算数运算符" class="headerlink" title="01. 算数运算符"></a>01. 算数运算符</h2><ul><li>算数运算符是 <strong>运算符的一种</strong></li><li>是完成基本的算术运算使用的符号，用来处理四则运算</li></ul><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th>实例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td>10 + 20 = 30</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td>10 - 20 = -10</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td>10 * 20 = 200</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td>10 / 20 = 0.5</td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">取整除</td><td>返回除法的整数部分（商） 9 // 2 输出结果 4</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取余数</td><td>返回除法的余数 9 % 2 = 1</td></tr><tr><td style="text-align:center">**</td><td style="text-align:center">幂</td><td>又称次方、乘方，2 ** 3 = 8</td></tr></tbody></table><h2 id="02-算数运算符的优先级"><a href="#02-算数运算符的优先级" class="headerlink" title="02. 算数运算符的优先级"></a>02. 算数运算符的优先级</h2><ul><li>和数学中的运算符的优先级一致<ul><li><strong>先乘除后加减</strong></li><li>同级运算符是 <strong>从左至右</strong> 计算</li><li>可以使用 <code>()</code> 调整计算的优先级</li></ul></li><li>以下表格的算数优先级由高到最低顺序排列</li></ul><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>幂 (最高优先级)</td></tr><tr><td>* / % //</td><td>乘、除、取余数、取整除</td></tr><tr><td>+ -</td><td>加法、减法</td></tr></tbody></table><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p><strong>程序用来处理数据的，变量就是用来存储数据的</strong></p><h2 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h2><blockquote><p>可以由 <strong>字母</strong>、<strong>下划线</strong> 和 <strong>数字</strong> 组成,不能有其他符号<br><strong>不能以数字开头</strong><br><strong>不能与关键字重名</strong>  </p><blockquote><p>关键字是python内部已使用的标识符，使用下面命令查看<br>import keyword<br>print(keyword.kwlist)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure></p></blockquote></blockquote><p>单词之间用下划线连接驼峰命名法即可。</p><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><p>=赋值 左边变量名 右边变量值 变量先定义后使用，要不就undefined了,变量可以重复定义。</p><blockquote></blockquote><p><code>#</code>定义num 然后调用<br>num = 1<br>num2 = 5<br>print(num)<br>print(num*num2)</p><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>定义变量是 <strong>不需要指定类型</strong>（在其他很多高级语言中都需要）</p><ul><li>数据类型可以分为 <strong>数字型</strong> 和 <strong>非数字型</strong></li><li>数字型<ul><li>整型 (<code>int</code>)</li><li>浮点型（<code>float</code>）</li><li>布尔型（<code>bool</code>） <ul><li>真 <code>True</code> <code>非 0 数</code> —— <strong>非零即真</strong></li><li>假 <code>False</code> <code>0</code></li></ul></li><li>复数型 (<code>complex</code>)<ul><li>主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题</li></ul></li></ul></li><li>非数字型<ul><li>字符串</li><li>列表</li><li>元组</li><li>字典<br>python2中整数还区分int long 3中只有int</li></ul></li><li>使用”<span style="color:red">type(变量名)</span>“ 查看变量类型<h3 id="变量运算"><a href="#变量运算" class="headerlink" title="变量运算"></a>变量运算</h3>bool值true为1 false为0 可以与数字进行加减乘除<br>同类型的变量可以进行运算，数字字符计算会报错哦<h3 id="字符串变量拼接"><a href="#字符串变量拼接" class="headerlink" title="字符串变量拼接"></a>字符串变量拼接</h3>可以用 + 或者 * 来拼接<blockquote></blockquote>str1 = “jiang”<br>str2 = “zs”<br>print(str1+str2)<br>print(str1*5)  </li></ul><h3 id="变量输入"><a href="#变量输入" class="headerlink" title="变量输入"></a>变量输入</h3><p>可以使用 <code>input</code> 函数从键盘等待用户的输入</p><ul><li>用户输入的 <strong>任何内容</strong> Python 都认为是一个 <strong>字符串</strong><blockquote><p>python<br>字符串变量 = input(“提示信息：”)<br>int(x) 强制类型转换</p></blockquote></li></ul><p>例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">price = float(input(<span class="string">"请输入价格"</span>))</span><br><span class="line">num = int(input(<span class="string">"请输入数量"</span>))</span><br><span class="line">print(price*num)</span><br></pre></td></tr></table></figure></p><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><table><thead><tr><th>格式化字符</th><th>含义</th></tr></thead><tbody><tr><td>%s</td><td>字符串</td></tr><tr><td>%d</td><td>有符号十进制整数，<code>%06d</code> 表示输出的整数显示位数，不足的地方使用 <code>0</code> 补全</td></tr><tr><td>%f</td><td>浮点数，<code>%.2f</code> 表示小数点后只显示两位</td></tr><tr><td>%%</td><td>输出 <code>%</code></td></tr></tbody></table><ul><li>语法格式如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"格式化字符串"</span> % 变量<span class="number">1</span>)</span><br><span class="line">print(<span class="string">"格式化字符串"</span> % (变量<span class="number">1</span>, 变量<span class="number">2.</span>..))</span><br></pre></td></tr></table></figure><ul><li><p>例子  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"我的名字叫 %s，请多多关照！"</span> % name)</span><br><span class="line">print(<span class="string">"我的学号是 %06d"</span> % student_no)</span><br><span class="line">print(<span class="string">"苹果单价 %.02f 元／斤，购买 %.02f 斤，需要支付 %.02f 元"</span> % (price, weight, money))</span><br><span class="line">print(<span class="string">"数据比例是 %.02f%%"</span> % (scale * <span class="number">100</span>))</span><br></pre></td></tr></table></figure></li><li><p>个人名片</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在控制台依次提示用户输入：姓名、公司、职位、电话、电子邮箱</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">name = input(<span class="string">"请输入姓名："</span>)</span><br><span class="line">company = input(<span class="string">"请输入公司："</span>)</span><br><span class="line">title = input(<span class="string">"请输入职位："</span>)</span><br><span class="line">phone = input(<span class="string">"请输入电话："</span>)</span><br><span class="line">email = input(<span class="string">"请输入邮箱："</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">30</span>)</span><br><span class="line">print(company)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"%s (%s)"</span> % (name, title))</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"电话：%s"</span> % phone)</span><br><span class="line">print(<span class="string">"邮箱：%s"</span> % email)</span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">30</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python基础-(一)简介</title>
      <link href="/2018/10/08/python%E5%9F%BA%E7%A1%80-(%E4%B8%80)%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/10/08/python%E5%9F%BA%E7%A1%80-(%E4%B8%80)%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h1 id="Python介绍"><a href="#Python介绍" class="headerlink" title="Python介绍"></a>Python介绍</h1><p>1991年第一个Python解释器诞生，它是用C语言实现的并能够调用C语言的库文件</p><h2 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h2><p>计算机不能处理机器语言01之外的语言，所以需要先翻译在执行，这种翻译工具称之为编译器，编译器翻译方式又分为编译，解释。当以解释方式运行的时候也成为解释器。</p><blockquote><p><strong>编译型语言</strong>：程序执行前先编译，翻译成机器语言文件，运行程序时不需要重新编译，直接使用编译结果就行，效率高，依赖编译器，跨平台差。如c c++<br><strong>解释型语言</strong>：解释型语言执行前不预编译，文本存储代码，逐行执行，运行程序时，先解释在执行，跨平台性能好，win linux mac下配置好解释环境执行代码文件即可。</p></blockquote><h1 id="Python-特点"><a href="#Python-特点" class="headerlink" title="Python 特点"></a>Python 特点</h1><ul><li>Python是<strong>完全面向对象的语言</strong>  <ul><li><strong>万物皆对象</strong>，函数、模块、数字、字符串都是对象</li><li>完全支持继承、重载、多重继承</li><li>支持重载运算符，也支持泛型设计</li></ul></li><li>Python <strong>拥有一个强大的标准库</strong><ul><li>Python核心包含<strong>数字</strong>、<strong>字符串</strong>、<strong>列表</strong>、<strong>字典</strong>、<strong>文件</strong> 等常见类型和函数；</li><li>Python 标准库提供了 <strong>系统管理</strong>、<strong>网络通信</strong>、<strong>文本处理</strong>、<strong>数据库接口</strong>、<strong>图形系统</strong>、<strong>XML 处理</strong> 等额外的功能</li></ul></li><li>Python 社区提供了<strong>大量的第三方模块</strong>，使用方式与标准库类似。它们的功能覆盖 <strong>科学计算</strong>、<strong>人工智能</strong>、<strong>机器学习</strong>、<strong>Web 开发</strong>、<strong>数据库接口</strong>、<strong>图形系统</strong> 多个领域，import…<h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1></li><li>胶水语言，开源，库多，扩展性好，如果需要一段关键代码运行得更快或者希望某些算法不公开，可以把这部分程序用 C 或 C++ 编写，然后在 Python 程序中使用它们</li><li>运行速度/市场占有/文献<h1 id="第一个Python程序"><a href="#第一个Python程序" class="headerlink" title="第一个Python程序"></a>第一个Python程序</h1><h2 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h2>.py结尾的文件，pyc是py编译后的二进制文件，加载速度快，看不到源码，可以反编译。内置库<code>py_compile</code>可以把py编译成pyc文件。<br>新建py文件，输入</li></ul><blockquote><p>python<br>print(“hello python”)<br>print(“hello world”)  </p></blockquote><p>然后windows/linux下<br><code>python 01-HelloPython.py</code></p><h2 id="认识错误"><a href="#认识错误" class="headerlink" title="认识错误"></a>认识错误</h2><p><strong>拼写错误</strong>：NameError: name ‘pirnt’ is not defined<br><strong>语法错误</strong>：SyntaxError: invalid syntax<br><strong>缩进错误</strong>：IndentationError: unexpected indent<br><strong>版本错误</strong>：2.x解释器名称是python；3.x 的解释器名称是 <strong>python3</strong></p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>目前市场上有两个 Python 的版本并存着，分别是 <code>Python 2.x</code> 和 <code>Python 3.x</code></p><ul><li>Python 2.x 是 <strong>过去的版本</strong><ul><li>解释器名称是 <strong>python</strong></li></ul></li><li>Python 3.x 是 <strong>现在和未来 主流的版本</strong><ul><li>解释器名称是 <strong>python3</strong></li><li>相对于 <code>Python</code> 的早期版本，这是一个 <strong>较大的升级</strong></li><li>为了不带入过多的累赘，<code>Python 3.0</code> 在设计的时候 <strong>没有考虑向下兼容</strong><ul><li>许多早期 <code>Python</code> 版本设计的程序都无法在 <code>Python 3.0</code> 上正常执行</li></ul></li><li>Python 3.0 发布于 <strong>2008 年</strong></li><li>到目前为止，Python 3.0 的稳定版本已经有很多年了<ul><li>Python 3.3 发布于 2012</li><li>Python 3.4 发布于 2014</li><li>Python 3.5 发布于 2015</li><li>Python 3.6 发布于 2016</li><li>过渡版本 —— <strong>Python 2.6</strong>2010 年中推出的 <code>Python 2.7</code> 被确定为 <strong>最后一个Python 2.x 版本</strong><h1 id="python运行的三种方式"><a href="#python运行的三种方式" class="headerlink" title="python运行的三种方式"></a>python运行的三种方式</h1><h2 id="解释器-python-python3"><a href="#解释器-python-python3" class="headerlink" title="解释器 python / python3"></a>解释器 <code>python</code> / <code>python3</code></h2><figure class="highlight bash"><figcaption><span>windows下都可以>>></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 使用 python 2.x 解释器</span></span><br><span class="line">$ python xxx.py</span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用 python 3.x 解释器</span></span><br><span class="line">$ python3 xxx.py</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="交互式"><a href="#交互式" class="headerlink" title="交互式"></a>交互式</h2><p>在 Python 的 <code>Shell</code> 中直接输入 <strong>Python 的代码</strong>，会立即看到程序执行结果，  </p><blockquote><p>适合于学习/验证 Python 语法或者局部代码<br>代码不能保存/不适合运行太大的程序<br><code>&gt;&gt;&gt; exit()</code>退出解释器或者<code>ctrl+d</code></p></blockquote><h3 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h3><ul><li>IPython 中 的 “I” 代表 <strong>交互 interactive</strong><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5></li><li>IPython 是一个 python 的 <strong>交互式 shell</strong>，比默认的 <code>python shell</code> 好用得多<ul><li>支持自动补全</li><li>自动缩进</li><li>支持 <code>bash shell</code> 命令</li><li>内置了许多很有用的功能和函数</li></ul></li><li><p>IPython 是基于 BSD 开源的<br><code>In [1]: exit退出解释器或者ctrl+d</code></p><h2 id="Python-的-IDE-——-PyCharm"><a href="#Python-的-IDE-——-PyCharm" class="headerlink" title="Python 的 IDE —— PyCharm"></a>Python 的 IDE —— <code>PyCharm</code></h2><h3 id="1）集成开发环境（IDE）"><a href="#1）集成开发环境（IDE）" class="headerlink" title="1）集成开发环境（IDE）"></a>1）集成开发环境（IDE）</h3><p>集成开发环境（<code>IDE</code>，Integrated Development Environment）—— <strong>集成了开发软件需要的所有工具</strong>，一般包括以下工具：</p></li><li><p>图形用户界面</p></li><li>代码编辑器（支持 <strong>代码补全</strong>／<strong>自动缩进</strong>）</li><li>编译器／解释器</li><li>调试器（<strong>断点</strong>／<strong>单步执行</strong>）<h3 id="2）PyCharm-介绍"><a href="#2）PyCharm-介绍" class="headerlink" title="2）PyCharm 介绍"></a>2）PyCharm 介绍</h3></li><li><code>PyCharm</code> 是 Python 的一款非常优秀的集成开发环境</li><li><code>PyCharm</code> 除了具有一般 IDE 所必备功能外，还可以在 <code>Windows</code>、<code>Linux</code>、<code>macOS</code> 下使用</li><li><code>PyCharm</code> 适合开发大型项目<ul><li>一个项目通常会包含 <strong>很多源文件</strong></li><li>每个 <strong>源文件</strong> 的代码行数是有限的，通常在几百行之内</li><li>每个 <strong>源文件</strong> 各司其职，共同完成复杂的业务功能<h4 id="恢复-PyCharm-的初始设置"><a href="#恢复-PyCharm-的初始设置" class="headerlink" title="恢复 PyCharm 的初始设置"></a>恢复 PyCharm 的初始设置</h4><code>PyCharm</code> 的 <strong>配置信息</strong> 是保存在 <strong>用户家目录下</strong> 的 <code>.PyCharmxxxx.x</code> 目录下的，<code>xxxx.x</code> 表示当前使用的 <code>PyCharm</code> 的版本号<br>如果要恢复 <code>PyCharm</code> 的初始设置，可以按照以下步骤进行：  </li></ul></li></ul><ol><li>关闭正在运行的 <code>PyCharm</code></li><li>在终端中执行以下终端命令，删除 <code>PyCharm</code> 的配置信息目录：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -r ~/.PyCharm2016.3</span><br></pre></td></tr></table></figure><ol start="3"><li>重新启动 <code>PyCharm</code><h4 id="安装和启动步骤"><a href="#安装和启动步骤" class="headerlink" title="安装和启动步骤"></a>安装和启动步骤</h4></li><li>执行以下终端命令，解压缩下载后的安装包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf pycharm-professional-2017.1.3.tar.gz</span><br></pre></td></tr></table></figure><ol start="2"><li>将解压缩后的目录移动到 <code>/opt</code> 目录下，可以方便其他用户使用</li></ol><blockquote><p><code>/opt</code> 目录用户存放给主机额外安装的软件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv pycharm-2017.1.3/ /opt/</span><br></pre></td></tr></table></figure></p></blockquote><ol start="3"><li>切换工作目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt/pycharm-2017.1.3/bin</span><br></pre></td></tr></table></figure><ol start="4"><li>启动 <code>PyCharm</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./pycharm.sh</span><br></pre></td></tr></table></figure><h4 id="03-程序卸载"><a href="#03-程序卸载" class="headerlink" title="03.程序卸载"></a>03.程序卸载</h4><ul><li>要卸载 <code>PyCharm</code> 只需要做以下两步工作：</li></ul><ol><li>删除解压缩目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -r /opt/pycharm-2016.3.1/</span><br></pre></td></tr></table></figure><ol start="2"><li>删除家目录下用于保存配置信息的隐藏目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -r ~/.PyCharm2016.3/</span><br></pre></td></tr></table></figure><blockquote><p>如果不再使用 PyCharm 还需要将 <code>/usr/share/applications/</code> 下的 <code>jetbrains-pycharm.desktop</code> 删掉</p></blockquote>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux基础命令</title>
      <link href="/2018/05/22/linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/05/22/linux%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="系统简介"><a href="#系统简介" class="headerlink" title="系统简介"></a>系统简介</h2><h3 id="linux内核及发行版本"><a href="#linux内核及发行版本" class="headerlink" title="linux内核及发行版本"></a>linux内核及发行版本</h3><ul><li><p>Linux内核版本</p><blockquote><p>内核(kernel)系统心脏，终端–&gt;系统调用—&gt;硬件,设备和应用程序的抽象层。<br>内核又分为稳定版和开发版:<br>稳定版：工业强度 广泛应用部署，新版相对于旧版只是修正bug或加入驱动程序<br>开发版：由于用于实验各种解决方案，所以变化很快.  </p></blockquote></li><li><p>Linux发行版本</p><blockquote><p>（也叫GNU/linux发行版本）通常包括桌面环境、办公套件、media、db<br>Ubuntu、Redhat、Fedora、openSUSE、Debian、centos、arch。。</p></blockquote></li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>查阅命令帮助信息   </p><blockquote><p>command –help<br>man command</p><blockquote><p>空格 下一页  enter 下一行 b 上一屏  f 下一屏 q 退出 /word 搜索</p></blockquote></blockquote><h3 id="目录相关命令"><a href="#目录相关命令" class="headerlink" title="目录相关命令"></a>目录相关命令</h3><blockquote><p>Linux文件或目录名称最长256个字符<br>.开头为隐藏的文件 -a显示 touch .test.txt 创建隐藏文本<br>.当前目录<br>..上一级目录</p></blockquote><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><p> ls list缩写，相当于dos下的dir   蓝色文件夹 白色文件  </p><blockquote><p>ls -a 查看所有<br>ls <em>.txt </em>代表任意个字符<br>？ ls te?t.txt ？只能代表一个字符<br>[]匹配[]中的任意一个  ls [twqs]st.txt<br>[abc]匹配abc中的任意一个<br>[a-f]匹配a-f中的任意一个  ls [1-3]st.txt</p></blockquote><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><p>change directory 更改目录</p><blockquote><p>cd 当前用户的家目录 /home/当前用户<br>cd ~ 同上<br>cd .当前目录<br>cd .. 切换上级目录<br>cd - 最近两个工作目录来回切换</p></blockquote><p>绝对路径：以 / 或者~开头，从根目录或家目录开始<br>相对路径：不以/~开头的，相对于当前目录。</p><h3 id="文件目录命令"><a href="#文件目录命令" class="headerlink" title="文件目录命令"></a>文件目录命令</h3><h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><p>创建文件或修改文件时间</p><blockquote><p>如果文件不存在，创建一个空白文件。<br>如果文件存在，修改文件最后修改日期</p></blockquote><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><p>创建新的目录</p><blockquote><p>mkdir -p /home/jiang/sssd/test 递归创建目录<br>新建目录不能与已有目录或文件同名。</p></blockquote><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><p>删除目录或文件，删除后不能恢复</p><blockquote><p>rm -f 强制删除，不提示<br>rm -r 删文件夹必须加该参数<br>rm *.txt 删除以txt结尾的文件</p></blockquote><h4 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h4><p>以树状图列出文件目录结构<br>tree -d 只显示目录，不显示文件</p><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><p>cp 源文件 目标文件  复制文件或者文件夹(不想改名直接加目标目录即可)</p><blockquote><p>cp -i 覆盖文件提示，<br>cp -r 若复制目录下子目录和文件，目标文件必须为一个目录名。</p></blockquote><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><p>移动文件或目录，也可以重命名。 mv 源文件  目标文件</p><blockquote><p>mv -i  源文件 目标文件</p></blockquote><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>1.查看文件内容、创建文件、合并文件、追加文件。<br>2.cat会一次显示所有内容，适合查看文本较少的文件。</p><blockquote><p>cat -b 输出非空编号  等价linux中的nl<br>cat -n 输出所有编号<br>cat -T 将tab显示为^l<br>cat &gt; test.txt &lt;&lt; EOF 创建test.txt<br>cat &gt;&gt; linuxsir.txt &lt;&lt; EOF 向test.txt追加内容</p></blockquote><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><ul><li>more用于分屏显示文件内容，每次只显示一页内容</li><li>-l 忽略ctrl + l 换页字符</li><li>-p 顶部清屏然后显示，相当于-c</li><li>-s 将连续的空行显示为一行</li><li>-u 将文件中的下划线去掉</li><li>+num 从第num行开始显示</li><li>-num 每屏显示num行<blockquote></blockquote>  空格 下一屏<br>  回车 下一行<br>  b 上一屏<br>  f 下一屏<br>  q 退出<br>  /word 查找字符串<h4 id="head-tail"><a href="#head-tail" class="headerlink" title="head tail"></a>head tail</h4></li><li>head是显示一个文件的前多少行，head -n num 文件名</li><li>tail是查看文件最后的多少行，tail -n num 文件名<h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4>文本搜索工具,可以匹配正则。<blockquote></blockquote>  grep sss test.txt<br>  grep -n ss test.txt  显示行号<br>  grep -v ss test.txt  反选包含ss的<br>  grep -i ss test.txt  不区分大小写<br>  grep -i “hello ss” test.txt 高亮显示字符串<br>常见的正则查找<blockquote></blockquote>  ^ss 搜索以ss开头的行 grep ^ss 1.txt<br>  ss$ 搜索以ss结尾的行 grep -n ss$ 1.txt<h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4></li><li>echo会在终端显示指定的文字参数，通常配合重定向</li><li>将执行结果重定向到一个文件</li><li><blockquote><p>输出，覆盖原文件内容</p></blockquote></li><li><blockquote><blockquote><p>追加，追加到文件的末尾 tree &gt; test.txt</p></blockquote></blockquote><h4 id="管道"><a href="#管道" class="headerlink" title="管道|"></a>管道|</h4></li><li>一个命令的输出结果作为另一个命令的输入，左写右读</li><li>常配合more分屏太多内容  如 ls -lah | more </li><li><p>grep 输出结果中过滤文本，history | grep error</p><h3 id="远程管理常用的命令"><a href="#远程管理常用的命令" class="headerlink" title="远程管理常用的命令"></a>远程管理常用的命令</h3><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><p>关机或者重启  </p></li><li><p>shutdown 选项 时间 </p></li><li>shutdown 不加参数或选项，默认一分钟后自动关闭</li><li>shutdown now 立刻关机</li><li>shutdown -r now 立即重启电脑</li><li>shutdown 8：30 在8：30自动关机</li><li>shutdown -c 取消自动关机</li><li>shutdown +10 十分钟后自动关机<h4 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h4></li><li>reboot 直接重启<h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><blockquote><p>init 0 关机<br>init 3 切换到多用户<br>init 5 切换到图形界面<br>init 6 重启  </p></blockquote><h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4></li><li>查看网卡ip信息，相当于windows下的ipconfig。</li><li>网卡相当于sim卡，ip相当于电话号码。</li><li><p>查看ip ifconfig | grep inet</p><h4 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h4><p>ssh专为远程登陆会话提供的安全协议，防止信息泄露，传输过程中经过压缩，加快传输速度。</p></li><li><p>ip找到网络上计算机，端口号找到计算机的应用程序，windows下直接是服务。</p></li><li>ssh服务器 22 web服务器 80 https 443 ftp服务器 21</li><li>ssh [-p port] user@remoteip -p指定其他端口，remote ip或域名</li><li>linux下ssh，windows下xshell或者putty</li></ul><p>家目录下.ssh目录会保存ssh的登陆配置信息，第一次会生成</p><ul><li><p>免密登陆，客户端下操作哦</p><blockquote><p>ssh-keygen 生产ssh钥匙，配置公钥，执行后会在.ssh下生成两个id文件<br>ssh-copy-id [-p port] user@remote 上传id_rsa.pub公钥到服务器，服务器加目录下.ssh目录下多个文件，  </p><p style="color:red">非对称加密算法，公钥加密的数据，需要私钥解密，传输数据时，客户端私钥加密，服务器端公钥解密</p></blockquote><p></p><p style="color:cyan">id_rsa.pub公钥文件，id_rsa私钥文件</p><p></p><h4 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h4><p>远程文件拷贝,注意指定端口时-P 一定大写</p></li><li><p>scp -P port 1.py user@remote:/home/jiang/desktop/1.test 将本地文件复制到远程目录下</p></li><li>scp user@remote:/home/jiang/1.py 1.py 远程复制到本地</li><li>scp -r aaa user@remote:/home/jiang 复制目录，本地到远程</li><li>scp -r user @remote:/home/jiang aaa<br><p style="color:cyan">配置别名，ssh test直接登陆</p><br>客户端.ssh目录下，创建config文件追加下面内容<blockquote></blockquote>  Host test<br>  HostName 192.168.1.100<br>  User jiang<br>  port 22<br>保存即可，ssh test就能登陆了，scp同样适用<h3 id="用户权限相关命令"><a href="#用户权限相关命令" class="headerlink" title="用户权限相关命令"></a>用户权限相关命令</h3></li><li>用户，组，其他用户，read 4 write 2 excute 1</li><li>硬链接数：有多少种方式访问当前的目录或文件</li><li><p>chmod +/- rwx 文件或目录名 或者chmod 777 文件或目录</p><h4 id="组管理的命令"><a href="#组管理的命令" class="headerlink" title="组管理的命令"></a>组管理的命令</h4><p>都需要在root下执行</p><blockquote></blockquote><p>  groupadd 组名 添加组<br>  groupdel 组名 删除组<br>  cat /etc/group 查看组<br>  chgrp 组名 文件/目录名 修改文件/目录所属组<br>eg:</p><blockquote></blockquote><p>  mkdir test 创建目录，所属组为jiang<br>  groupadd dev 创建一个组<br>  cat /etc/group 查看组<br>  sudo chgrp -R dev test 更改test目录组为dev</p><h4 id="用户命令的管理"><a href="#用户命令的管理" class="headerlink" title="用户命令的管理"></a>用户命令的管理</h4><p>创建用户，然后创建密码</p></li><li><p><span style="color:red">useradd -m -g 组名 用户名 </span>-m创建家目录，-g指定用户组，不加-g自动创建和用户名一样的组</p></li><li>sudo useradd -m -g test jiang test组创建用户jiang </li><li><span style="color:red">passwd 用户名 </span>root权限下添加用户后需要设置密码，</li><li><span style="color:red">userdel -r 用户名</span>删除用户，-r参数删除用户的家目录</li><li>cat /etc/passwd | grep 用户名 查看用户信息<h4 id="查看用户信息"><a href="#查看用户信息" class="headerlink" title="查看用户信息"></a>查看用户信息</h4></li><li><p>id [用户名] 查看用户的UID和GID</p><blockquote><p>id jiang jiang:x:1000:1001::/home/jiang 1000用户id 1001组id </p></blockquote></li><li><p>who 查看当前所有登陆的用户列表</p></li><li>whoami 查看当前登陆用户的账户名<h4 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h4></li><li>usermod 设置用户的主组/附加组和登陆shell<blockquote><p>主组：一般新建用户时设定，在etc/passwd的第四列GID对应的组<br>附加组:在etc/group中最后一列表示改组的用户列表</p></blockquote>  #修改用户的主组（passwd中的GID）<br>  usermod -g 组 用户名<br>  #修改用户的附加组<br>  usermod -G 组 用户名<br>  #修改用户的登陆shell<br>  usermod -s /bin/bash 用户名<h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4></li><li>which ls    /bin/ls</li><li>which passwd /usr/bin/passwd<blockquote></blockquote>  /bin  二进制执行文件目录，主要用于具体应用<br>  /sbin 系统管理员专用的二进制代码存放目录，用于系统管理<br>  /usr/bin 后期用户自己安装的一些软件<br>  /usr/sbin 超级用户的一些管理程序<h4 id="su"><a href="#su" class="headerlink" title="su"></a>su</h4></li><li>su - 用户名 切换用户并到其家目录和shell环境</li><li>su 用户名  切换用户，还是原来的shell环境</li><li>exit 退出当前登陆用户，返回到上一个用户环境。<h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4></li><li>chown 修改拥有着 </li><li>chgrp 修改用户组 </li><li>chmod 修改用户权限<blockquote></blockquote>  chown 用户名 文件/目录<br>  chgrp -R 组名 文件/目录    递归修改所有文件权限<br>  chmod +/- wrx 文件/目录   777<br>  chmod -R 640 文件夹 修改文件夹下所有文件的权限<h3 id="系统相关命令"><a href="#系统相关命令" class="headerlink" title="系统相关命令"></a>系统相关命令</h3><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4></li><li>root下 date -s “2018-05-22 18:08:05”修改时间</li><li>当前日期  date +”%Y%m%d”</li><li><p>当前日期格式 date +”%Y-%m-%d”</p><blockquote><p>注意：<br>1.date后面必须有空格，date+”%Y%m%d”不可以<br>2.加号后面不可以有空格！ date + “%Y%m%d”不可以<br>3.加号后面的这个 单引号双引号或者都不加都可以  </p></blockquote></li><li><p>获取昨日时间 date -d “-1 day” 或者 date -d “1 day ago”</p></li><li>获取昨日日期  date -d “-1 day” +%Y%m%d</li><li>获取上个月、去年的日期、时间  date -d “-1 month” +%Y%m%d<h4 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h4></li><li>默认查看月日历，-y查看一年的</li><li>cal 5 2018 查看固定年月的</li><li>cal 2018 显示2018年的<h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><blockquote><p>df -h 显示磁盘剩余空间<br>df -a 查看全部文件系统<br>df -t ext3 只显示ext3格式的fs<br>df -T 显示每个文件的系统类型</p></blockquote><h4 id="du"><a href="#du" class="headerlink" title="du"></a>du</h4><blockquote><p>du -h [目录名] 显示目录下文件大小<br>du -s 显示总和大小<br>du -ah 文件和目录都显示  </p></blockquote><h4 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h4></li><li>ps aux 查看进程详细情况 all u详细 x没有控制终端的进程</li><li>ps -ef | grep tom 查看tomcat进程</li><li>top 动态显示运行中的程序并排序</li><li>kill [-9] pid 终止程序，-9表示强行终止<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4>查找指定目录下符合条件的文件</li><li>find [路径] -name “.py” 查找指定路径下扩展名为py的文件<blockquote><p>如果没加路径，表示在当前文件夹下查找<br>find -name “123*”</p></blockquote><h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h4>linux中文件名 和文件的数据是分开保存的，源文件删除后，软连接失效，硬链接有效。</li><li><p>软连接 </p><blockquote><p>ln -s 源文件 链接文件名    类似于快捷方式，没-s是硬链接，绝对路径，相对路径被移动目录后会爆错找不到。</p></blockquote></li><li><p>硬链接</p><blockquote><p>ln 源文件 链接文件名<br>查看 ln -l  </p></blockquote><h3 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h3><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4></li><li>压缩 tar cvf 文件名.tar 被打包的文件或路径</li><li>解压 tar zxf 打包文件.tar </li><li>c 创建 x 解开 v 过程 f指定文件名，f后一定是tar文件，需放最后<h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h4></li><li>tar只负责打包，gzip负责压缩<blockquote></blockquote>  压缩文件<br>  tar -zcvf filename.tar.gz 被压缩的文件或路径<br>  解压文件<br>  tar -zxvf 打包文件.tar.gz<br>  解压缩到指定路径<br>  tar -zxvf 打包文件.tar.gz -C 路径<br>注意-C 路径时，路径必须已经存在<h4 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h4></li><li>tar打包，bzip2压缩 格式为XXXx.tar.bz2<blockquote><p>d<br>  压缩<br>  tar -jcvf XXx.tar.bz2 被压缩的文件或路径<br>  解压缩<br>  tar -jxvf 打包文件.tar.bz2<br>  解压缩到指定路径,加-C<br>  tar -jxvf 打包文件.tar.gz -C 路径</p></blockquote></li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell(一)流程控制、函数</title>
      <link href="/2018/05/21/shell(%E4%B8%80)%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E3%80%81%E5%87%BD%E6%95%B0/"/>
      <url>/2018/05/21/shell(%E4%B8%80)%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E3%80%81%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="shell流程控制、函数"><a href="#shell流程控制、函数" class="headerlink" title="shell流程控制、函数"></a>shell流程控制、函数</h1><h2 id="1-if-else-elif"><a href="#1-if-else-elif" class="headerlink" title="1.if else elif"></a>1.if else elif</h2><pre><code>#!/bin/basha=10b=20if [ $a == $b ]then         echo &quot;true&quot;fiif [ $a == $b]then    echo &quot;true&quot;else    echo &quot;false&quot;fiif [ $a == $b ]then    echo &quot;a=b&quot;elif [ $a -gt $b]then    echo &quot;a&gt;b&quot;elif [ $a -lt $b ]then    echo &quot;a&lt;b&quot;else     echo &quot;none is right&quot;fi</code></pre><h2 id="2-for"><a href="#2-for" class="headerlink" title="2.for"></a>2.for</h2><pre><code>#!/bin/bashfor i in {1,5,85}do     echo $idonefor i in 5 6 7 43do     echo $idonefor file in $HONE/.bash*do     echo $filedone</code></pre><h2 id="3-while"><a href="#3-while" class="headerlink" title="3.while"></a>3.while</h2><pre><code>#!/bin/bashint=1while(($int&lt;=8))do    echo $int    let &quot;int++&quot;donewhile [$int -lt 5]do    int=`expr $int +1`    echo $intdone</code></pre><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h3><pre><code>while :do        commanddone</code></pre><h2 id="4-until"><a href="#4-until" class="headerlink" title="4.until"></a>4.until</h2><pre><code>#!/bin/basha=0until [ ! $a -lt 10 ]do    echo $a    a=`expr $a+1`done</code></pre><h2 id="5-case"><a href="#5-case" class="headerlink" title="5.case"></a>5.case</h2><pre><code>#!/bin/bashecho &quot;输入1到4之间的数&quot;echo &quot;你输入的数字为&quot;read numcase $num in     1) echo &quot;你输入的是1&quot;    ;;    2) echo &quot;你输入的是2&quot;    ;;    3) echo &quot;你输入的是3&quot;    ;;    4) echo &quot;你输入的是4&quot;    ;;    *) echo &quot;你输入的不对&quot;    ;; esac</code></pre><h2 id="6-跳出循环"><a href="#6-跳出循环" class="headerlink" title="6.跳出循环"></a>6.跳出循环</h2><h3 id="break终止循环"><a href="#break终止循环" class="headerlink" title="break终止循环"></a>break终止循环</h3><pre><code>#!/bin/bashwhile:do     echo -n &quot;输入1到5之间的数字&quot;    read num    case $num in    1|2|3|4|5) echo &quot;你输入的数字是$num&quot;    ;;    *) echo &quot;你输入的不是1-5之间的&quot;        break    ;;    esacdone</code></pre><h3 id="continue-跳出本次循环"><a href="#continue-跳出本次循环" class="headerlink" title="continue 跳出本次循环"></a>continue 跳出本次循环</h3><pre><code>上述代码 break换成continue 不会结束</code></pre><h2 id="7-函数"><a href="#7-函数" class="headerlink" title="7.函数"></a>7.函数</h2><blockquote><p>定义: 可以funtion fun_name(){}<br>也可以 fun(){}<br>参数返回，加return返回，不加以最后一条命令运行结果作为返回值。</p></blockquote><pre><code>#!/bin/bashdemo(){    echo &quot;test函数&quot;}demo  #调用函数</code></pre><blockquote><p>return函数</p></blockquote><pre><code>#!/bin/bashfunSum(){    echo &quot;输入第一个数字：&quot;    read num1    echo &quot;输入第二个数字&quot;    read num2    return $(($num1+$num2)) # return `expr $num1 + $num2`}funSumecho &quot;输入两个数字和为$?&quot;</code></pre><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><blockquote><p>调用函数时可以向其传递参数，$n获取参数值$1第一个，$2第二个，$10不能获取第十个，用${10},当n&gt;=10时，需要用${n}来获取参数</p></blockquote><pre><code>#!/bin/bashfun(){    echo &quot;第一个参数 $1&quot;    echo &quot;第二个参数 $2&quot;    echo &quot;第十个参数 $10&quot;    echo &quot;第十个参数 ${10}&quot;    echo &quot;参数总数为$#&quot;    echo &quot;一个字符串输出所有参数$*&quot;}fun 1 2 34 123 21 32 31 12 1 1 1 21</code></pre><p>$#参数个数 $*单个字符串显示所有参数 $@使用时加引号，返回每个参数<br>$? 函数返回值</p><h3 id="8-调用另一个脚本"><a href="#8-调用另一个脚本" class="headerlink" title="8.调用另一个脚本"></a>8.调用另一个脚本</h3><pre><code>#!/bin/bash. ./fun.shorsource ./fun.sh</code></pre>]]></content>
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell(一)运算符、test</title>
      <link href="/2018/05/20/shell(%E4%B8%80)%E8%BF%90%E7%AE%97%E7%AC%A6_test/"/>
      <url>/2018/05/20/shell(%E4%B8%80)%E8%BF%90%E7%AE%97%E7%AC%A6_test/</url>
      <content type="html"><![CDATA[<h1 id="shell运算符、test"><a href="#shell运算符、test" class="headerlink" title="shell运算符、test"></a>shell运算符、test</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>包含算数运算符、关系运算符、布尔运算符、字符串运算符、文件测试运算符<br>原生bash不支持数学运算，可通过awk和expr</p><pre><code>#!/bin/bashval=`expr 2 + 2` #加好前后必须有空格 否则报错echo &quot;和为：$val&quot;</code></pre><h3 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1.算数运算符"></a>1.算数运算符</h3><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:center">说明</th><th style="text-align:right">例子</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:center">加</td><td style="text-align:right"><code>expr $a + $b</code></td></tr><tr><td style="text-align:left">-</td><td style="text-align:center">减</td><td style="text-align:right"><code>expr $a - $b</code></td></tr><tr><td style="text-align:left">*</td><td style="text-align:center">乘</td><td style="text-align:right"><code>expr $a \* $b</code></td></tr><tr><td style="text-align:left">/</td><td style="text-align:center">除</td><td style="text-align:right"><code>expr $a / $b</code></td></tr><tr><td style="text-align:left">%</td><td style="text-align:center">取余</td><td style="text-align:right"><code>expr $a % $b</code></td></tr><tr><td style="text-align:left">=</td><td style="text-align:center">赋值</td><td style="text-align:right">a=$b 把变量b值赋给a</td></tr><tr><td style="text-align:left">==</td><td style="text-align:center">相等，用于数字，返回true或者false</td><td style="text-align:right">if [$a == $b]</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:center">不等，判断数字，返回true or false</td><td style="text-align:right">if [$a != $b]</td></tr></tbody></table><p><b>注意 乘法*需要转义\,符号前后都要有空格</b></p><pre><code>#!/bin/bashnum1=10num2=20sum=`expr $num1 + $num2`min=`expr $num1 - $num2`cheng=`expr $num1 \* $num2`chu=`expr $num1 / $num2`yu=`expr $num1 % $num2`if [ $num1 == $num2 ]then    echo &quot;num1=num2&quot;fiif[ $num1 != $num2]then     echo &quot;num1 != num2&quot;fi</code></pre><h3 id="2-关系运算符"><a href="#2-关系运算符" class="headerlink" title="2.关系运算符"></a>2.关系运算符</h3><p>关系运算符只支持数字，不支持string，除非字符串值是数字</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:center">说明</th><th style="text-align:right">例子</th></tr></thead><tbody><tr><td style="text-align:left">-eq</td><td style="text-align:center">是否相等，返回true或false</td><td style="text-align:right">[ $a -eq $b]</td></tr><tr><td style="text-align:left">-ne</td><td style="text-align:center">是否不相等，返回true或false</td><td style="text-align:right">[ $a -ne $b]</td></tr><tr><td style="text-align:left">-gt</td><td style="text-align:center">左边是否大于右边，返回true或false</td><td style="text-align:right">[ $a -gt $b]</td></tr><tr><td style="text-align:left">-ge</td><td style="text-align:center">左边是否大于等于右边，返回true或false</td><td style="text-align:right">[ $a -ge $b]</td></tr><tr><td style="text-align:left">-lt</td><td style="text-align:center">左边是否小于右边的，返回true或false</td><td style="text-align:right">[ $a -lt $b]</td></tr><tr><td style="text-align:left">-le</td><td style="text-align:center">左边是否小于等于右边，返回true或false</td><td style="text-align:right">[ $a -le $b]</td></tr></tbody></table><pre><code>#!/bin/basha=100b=200if [ $a -gt $b ] #换哪个都行then     echo &quot;$a 大于 $b&quot;else    echo &quot;$a 小于$b&quot;fi</code></pre><h3 id="3-布尔运算符"><a href="#3-布尔运算符" class="headerlink" title="3.布尔运算符"></a>3.布尔运算符</h3><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:center">说明</th><th style="text-align:right">举例</th></tr></thead><tbody><tr><td style="text-align:left">-a</td><td style="text-align:center">与运算，表达式同时为真才是真</td><td style="text-align:right">[ $a -lt 100 -a $b -le 200 ]</td></tr><tr><td style="text-align:left">-o</td><td style="text-align:center">或运算，表达式有一个为真为真</td><td style="text-align:right">[ $a -lt 100 -o $b -le 200]</td></tr><tr><td style="text-align:left">!</td><td style="text-align:center">非运算，表达式为真返回false，取反</td><td style="text-align:right">[ !false ] 值为true</td></tr></tbody></table><pre><code>#!/bin/bashnum1=100num2=200if[ $num1 -le 101 -o $num2 -gt 300 ]then    echo &quot;嚯嚯嚯嚯嚯嚯&quot;else     echo &quot;假的&quot;fi</code></pre><h3 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h3><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:center">说明</th><th style="text-align:right">举例</th></tr></thead><tbody><tr><td style="text-align:left">&amp;&amp;</td><td style="text-align:center">逻辑and</td><td style="text-align:right">[ $a -lt 100 &amp;&amp; $b -le 200 ]</td></tr><tr><td style="text-align:left"><code>&#124;&#124;</code></td><td style="text-align:center">逻辑or</td><td style="text-align:right">[ $a -lt 100 -o $b -le 200]</td></tr></tbody></table><pre><code>#!/bin/bashnum1=100num2=200if[ $num1 -le 101 &amp;&amp; $num2 -gt 300 ]then    echo &quot;嚯嚯嚯嚯嚯嚯&quot;else     echo &quot;假的&quot;fi</code></pre><h3 id="5-字符串运算符"><a href="#5-字符串运算符" class="headerlink" title="5.字符串运算符"></a>5.字符串运算符</h3><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:center">说明</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:center">判断两个字符串是否相等，</td><td style="text-align:left">[ $a = $b ] 相等返回true</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:center">判断两个字符串是否相等，</td><td style="text-align:left">[ $a != $b ] 不相等返回true</td></tr><tr><td style="text-align:left">-z</td><td style="text-align:center">检测字符串长度是否为0，</td><td style="text-align:left">[ -z $a ] 是0返回true</td></tr><tr><td style="text-align:left">-n</td><td style="text-align:center">检测字符串长度时候为0，不为0返回true</td><td style="text-align:left">[ -n “$a” ] 不为0返回true</td></tr><tr><td style="text-align:left">str</td><td style="text-align:center">检测字符串是否为空，空false，不空true</td><td style="text-align:left">[ $a ]不空true</td></tr></tbody></table><pre><code>a=&quot;asdasd&quot;if [ $a ] #字符串是否为空then   echo &quot;$a : 字符串不为空&quot;else   echo &quot;$a : 字符串为空&quot;fi</code></pre><h3 id="6-文件测试运算符"><a href="#6-文件测试运算符" class="headerlink" title="6.文件测试运算符"></a>6.文件测试运算符</h3><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:center">说明</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">-b file</td><td style="text-align:center">检测文件是否块设备文件，是返回true</td><td style="text-align:left">[-b $file] 是返回true</td></tr><tr><td style="text-align:left">-e file</td><td style="text-align:center">检测文件(包含目录)是否存在，是返回true</td><td style="text-align:left">[-e $file ] 存在返回true</td></tr><tr><td style="text-align:left">-f file</td><td style="text-align:center">检测文件是否为普通文件(不是目录，也不是块文件)，是返回true</td><td style="text-align:left">[-e $file ] 存在返回true</td></tr><tr><td style="text-align:left">-s file</td><td style="text-align:center">检测文件是否为空，大小是否大于0，不为空返回true</td><td style="text-align:left">[-s $file ]不为空返回true</td></tr><tr><td style="text-align:left">-r file</td><td style="text-align:center">文件是否可读，是返回true</td><td style="text-align:left">[-w $file ]可读返回true</td></tr><tr><td style="text-align:left">-w file</td><td style="text-align:center">文件是否可写，是返回true</td><td style="text-align:left">[-w $file ]可写返回true</td></tr><tr><td style="text-align:left">-x file</td><td style="text-align:center">文件是否可执行，是返回true</td><td style="text-align:left">[-w $file ]可执行返回true</td></tr><tr><td style="text-align:left">-r file</td><td style="text-align:center">文件是否可读，是返回true</td><td style="text-align:left">[-w $file ]可读返回true</td></tr></tbody></table><pre><code>file=&quot;/home/jiang/test.sh&quot;if [ -r $file ]then   echo &quot;文件可读&quot;else   echo &quot;文件不可读&quot;fi</code></pre><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>检测条件是否成立数值、字符、文件三个方面</p><h3 id="数值测试"><a href="#数值测试" class="headerlink" title="数值测试"></a>数值测试</h3><p>-eq 等于为真 -ne不等为真 -gt -ge -lt -le</p><pre><code>num1=100num2=100if test $[num1] -eq $[num2] # if [ $num1 -eq $num2 ]then    echo &quot;两个数相等&quot;else    echo &quot;两个数不等&quot;fi</code></pre><h3 id="字符串测试"><a href="#字符串测试" class="headerlink" title="字符串测试"></a>字符串测试</h3><p>=等于为真 !=不等为真 -z字符串长度为0为真 -n字符串长度不为0为真</p><pre><code>num1=&quot;asdasd&quot;num2=&quot;qwerqw&quot;if test $num1 = $num2then    echo &apos;两个字符串相等!&apos;else    echo &apos;两个字符串不相等!&apos;fi</code></pre><h3 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a>文件测试</h3><blockquote><p>-e 文件名 存在为真<br>-d 文件名 文件存在且为目录为真<br>-f 文件名 文件存在且为普通文件为真<br>-s 文件名 文件岑仔且至少有一个字符为真<br>-b 文件名 文件存在且为块特殊文件为真<br>-w -r -x 文件名 文件是否为刻度可写可执行为真</p></blockquote><pre><code>cd /binif test -e ./bashthen    echo &apos;文件已存在!&apos;else    echo &apos;文件不存在!&apos;fi</code></pre>]]></content>
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell(一)变量_数组_传参_输出</title>
      <link href="/2018/05/20/shell(%E4%B8%80)%E5%8F%98%E9%87%8F_%E6%95%B0%E7%BB%84_%E4%BC%A0%E5%8F%82_%E8%BE%93%E5%87%BA/"/>
      <url>/2018/05/20/shell(%E4%B8%80)%E5%8F%98%E9%87%8F_%E6%95%B0%E7%BB%84_%E4%BC%A0%E5%8F%82_%E8%BE%93%E5%87%BA/</url>
      <content type="html"><![CDATA[<h1 id="shell变量、字符串、数组、传参、输入输入"><a href="#shell变量、字符串、数组、传参、输入输入" class="headerlink" title="shell变量、字符串、数组、传参、输入输入"></a>shell变量、字符串、数组、传参、输入输入</h1><h2 id="1-shell简介"><a href="#1-shell简介" class="headerlink" title="1.shell简介"></a>1.shell简介</h2><blockquote><p>通常我们使用bash (bourne again shell)，因为bash免费而且简单。<br>直接使用在win/Unix/Linux上面，并且可以调用大量系统内部的功能来解释执行程序，</p></blockquote><h2 id="2-shell工作原理"><a href="#2-shell工作原理" class="headerlink" title="2.shell工作原理"></a>2.shell工作原理</h2><blockquote><p>Shell可以被称作是脚本语言，因为它本身是不需要编译的，而是通过解释器解释之后再编译执行，和传统语言相比多了解释的过程所以效率会略差于传统的直接编译的语言。</p></blockquote><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h2><h3 id="第一个脚本"><a href="#第一个脚本" class="headerlink" title="第一个脚本"></a>第一个脚本</h3><p>vi test.sh创建第一个脚本</p><pre><code>#!/bin/bash         echo &quot;hello world&quot;    </code></pre><blockquote><p>cd 该目录下<br>chmod 777 test.sh #给脚本执行权限 +x 也可以<br>./test.sh    #执行脚本</p></blockquote><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><blockquote><p>英文、数字、下划线，首字符不以数字开头，中间不能有空格，可以下划线_  不能有标点，不能有关键字。<br><strong>变量名和等号之间不能有空格</strong><br>可以直接=赋值，也可以语句赋值</p></blockquote><pre><code>for file in `ls /dev`  do    echo $filedone</code></pre><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><blockquote><p>定义使用的变量，在变量名前加美元符号$ 即可，可以使用{}识别边界，变量可以重复命名。</p><pre><code>num=2echo &quot;this is $num&quot;echo &quot;this is the $numnd&quot;  # numnd 变量不存在echo &quot;this is the ${num}nd&quot; #识别边界</code></pre></blockquote><h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><blockquote><p>readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变,</p></blockquote><pre><code>#!bin/bashnum=&quot;qweq&quot;readonly numnum=&quot;asdd&quot; #重新赋值时会提示变量只读  </code></pre><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><blockquote><p>unset可以删除变量，但是不能删除只读变量</p><pre><code>unset var_name</code></pre></blockquote><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><ol><li>局部变量：脚本或命令中定义，仅在shell中使用，其他shell程序不能访问局部变量</li><li>环境变量：脚本可以定义环境变量，程序运行需要环境变量来保证</li><li>shell变量：shell程序设置的特殊变量，一部分是环境变量，一部分是局部变量，变量保证了shell的正常运行</li></ol><p>##4.字符串string<br>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p>###单引号 str=’hello world’</p><blockquote><p>单引号原样输出，变量无效，单引中不能出现单引（转义无效）</p></blockquote><p>###双引号 </p><blockquote><p>双引中可以有变量，可以有转义字符</p></blockquote><pre><code>a=&apos;qq&apos;str=&quot;hello \&quot;$a\&quot; !&quot;str1=&quot;hello $a&quot;echo str # hello &quot;qq&quot;echo str1 # hello qq</code></pre><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><pre><code>echo ${#string}</code></pre><h3 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h3><pre><code>str=&quot;hello world jiang&quot;echo `expr index &quot;$str&quot; or` #必须有&quot;&quot; 否则报错</code></pre><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5.数组"></a>5.数组</h2><p>bash只支持一维数组，下标0开始，获取数组元素利用下标。</p><p>###定义数组<br>    array_name=(val0 val1 val2 val3)  # 没有逗号</p><p>或者 </p><pre><code>array_name=(val0val1val2val3)</code></pre><p>或者单独定义各个分量，可以不使用连续的下标。下标范围没限制。</p><pre><code>array_name[0]=value0array_name[1]=value1array_name[n]=valuen</code></pre><h3 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h3><p>读取数组一般格式为${arr_name[index]}<br>使用@、*符号获取数组中所有元素 </p><pre><code>echo ${arr_name[@]}echo ${arr_name{*}}</code></pre><h3 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h3><pre><code>echo ${#arr[@]}echo ${#arr[*]}echo ${#arr[n]} #获取单个数组元素长度</code></pre><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><pre><code>#!/bin/basharr=(123 45643 7897 3213)for i in ${arr[*]}do    echo ${#i}  #打印个数    echo ${i}   #打印每个元素  done</code></pre><h2 id="6-传参"><a href="#6-传参" class="headerlink" title="6.传参"></a>6.传参</h2><h3 id="n"><a href="#n" class="headerlink" title="$n"></a>$n</h3><p>$0 脚本名 $1 第一个参数 $2 第二个参数 $3第三个参数</p><blockquote></blockquote><pre><code>#!/bin/bashecho &quot;文件名为：$0&quot;echo &quot;第一个参数为:$1&quot;echo &quot;第二个参数为:$2&quot;</code></pre><p>./test.sh start over </p><blockquote></blockquote><pre><code>文件名为 ./test.sh第一个参数为：start第二个参数为：over    </code></pre><h3 id=""><a href="#" class="headerlink" title="$# $* $@"></a>$# $* $@</h3><pre><code>#!/bin/bashecho &quot;参数个数为：$#&quot;for i in &quot;$*&quot;do    echo $idonefor i in &quot;$@&quot;do    echo $idone</code></pre><p>执行下脚本./canshu.sh 1 2 3</p><pre><code>参数个数为：31 2 3123</code></pre><h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">意义</th></tr></thead><tbody><tr><td style="text-align:left">$$</td><td style="text-align:left">显示进程ID号</td></tr><tr><td style="text-align:left">$?</td><td style="text-align:left">显示命令最后退出状态，0没错误，其他值表示有错误</td></tr><tr><td style="text-align:left">$@</td><td style="text-align:left">所有参数$@为”$1””$2””$3”</td></tr><tr><td style="text-align:left">$*</td><td style="text-align:left">所有参数$*为”$1 $2 $3..$n”</td></tr><tr><td style="text-align:left">$#</td><td style="text-align:left">参数长度</td></tr></tbody></table><h2 id="7-输出echo"><a href="#7-输出echo" class="headerlink" title="7.输出echo"></a>7.输出echo</h2><h3 id="打印普通字符串"><a href="#打印普通字符串" class="headerlink" title="打印普通字符串"></a>打印普通字符串</h3><pre><code>echo &quot;test&quot; echo test # 双引号可以省略</code></pre><h3 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a>显示转义字符</h3><pre><code>echo &quot;\&quot;test\&quot;&quot;  #&quot;test&quot;echo \&quot;test\&quot;     #&quot;test&quot;</code></pre><h3 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a>显示变量</h3><pre><code>#!/bin/bashread name    #从键盘中读取变量echo &quot;$name welcome&quot;</code></pre><h3 id="显示换行-不换行"><a href="#显示换行-不换行" class="headerlink" title="显示换行/不换行"></a>显示换行/不换行</h3><pre><code>echo -e &quot;ok \n&quot;echo -e &quot;ok \c&quot;  #-e转义 \c 不换行echo asdads  #和ok在一行</code></pre><h3 id="显示结果到指定文件"><a href="#显示结果到指定文件" class="headerlink" title="显示结果到指定文件"></a>显示结果到指定文件</h3><pre><code>echo &quot;test result&quot; &gt;  test.sh</code></pre><h3 id="原样输出字符串，不进行转义或者取变量（用单引号）"><a href="#原样输出字符串，不进行转义或者取变量（用单引号）" class="headerlink" title="原样输出字符串，不进行转义或者取变量（用单引号）"></a>原样输出字符串，不进行转义或者取变量（用单引号）</h3><pre><code>echo &apos;$name&apos; # 输出结果为 $name</code></pre><h3 id="显示命令执行结果"><a href="#显示命令执行结果" class="headerlink" title="显示命令执行结果"></a>显示命令执行结果</h3><pre><code>echo `date` #注意是反引号</code></pre><h2 id="8-读取read"><a href="#8-读取read" class="headerlink" title="8.读取read"></a>8.读取read</h2><blockquote><p>read 接收输入的参数，参数用空格进行分隔；如果输入的词组个数大于需要的参数个数，则多出的词组将被作为整体为最后一个参数接收。</p><pre><code>read first secondecho 第一个：$first 第二个：$second</code></pre><p>如果超出参数长度./test.sh 1 2 3 4<br>执行结果为 第一个：1 第二个：2 3 4<br>参数说明<br>-p 提示文字<br>-n 字符长度限制，到指定位数自动结束<br>-t 输入限时<br>-s 隐藏输入内容</p></blockquote><pre><code>read -p &quot;请输入密码&quot; -n 6 -t 5 -s passecho password is $pass</code></pre><h2 id="9-输出printf"><a href="#9-输出printf" class="headerlink" title="9.输出printf"></a>9.输出printf</h2><p>echo自带换行 printf “hello \n”手动加</p><blockquote><p>格式替代符%d %s %c %f</p></blockquote><table><thead><tr><th style="text-align:left">替代符</th><th style="text-align:center">说明</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">d</td><td style="text-align:center">十进制</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">s</td><td style="text-align:center">字符串或字符型，否则报错</td><td style="text-align:left">%-10s 宽度十字符-左对齐</td></tr><tr><td style="text-align:left">c</td><td style="text-align:center">char字符型或字符</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">f</td><td style="text-align:center">float浮点，参数是数字型</td><td style="text-align:left">%-4.2f .2指保留2位小数</td></tr></tbody></table><blockquote><p>其中最后一个参数是 “def”，%c 自动截取字符串的第一个字符作为结果输出。<br>$  printf “%d %s %c\n” 1 “abc” “def”</p></blockquote><pre><code>printf &quot;%-10s %-8s %-4s\n&quot; 姓名 性别 体重kg  printf &quot;%-10s %-8s %-4.2f\n&quot; asd 男 12.12 </code></pre><h3 id="printf转义序列"><a href="#printf转义序列" class="headerlink" title="printf转义序列"></a>printf转义序列</h3><p>\n换行 \r回车 \f 换页 \b后退 </p>]]></content>
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown语法</title>
      <link href="/2018/04/20/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/04/20/markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表(+-*)"></a>无序列表(+-*)</h3><ul><li>1</li><li>2</li><li>3</li></ul><ul><li>1</li><li>2</li><li>3</li></ul><ul><li>1</li><li>2</li><li>3</li></ul><h3 id="有序列表-数字加"><a href="#有序列表-数字加" class="headerlink" title="有序列表(数字加.)"></a>有序列表(数字加.)</h3><ol><li>列表一</li><li>列表二</li><li>列表三</li><li>列表四（这里注意数字并不对应）</li></ol><h3 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h3><ul><li>不以结婚为目的的恋爱都叫耍流氓<blockquote><p>这是毛主席说的</p></blockquote></li></ul><blockquote><h2 id="标题-1"><a href="#标题-1" class="headerlink" title="标题"></a>标题</h2><ul><li>不以结婚为目的的<blockquote><p>毛主席说的</p></blockquote></li><li>前方高能<blockquote><p>热爱刺激了</p></blockquote></li></ul></blockquote><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级的</p><blockquote><p>四级的</p><blockquote><blockquote><blockquote><p>七级的</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote><p>代码例子</p></blockquote><pre><code>protected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);}</code></pre><blockquote><h2 id="分割线可以由-（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以"><a href="#分割线可以由-（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以" class="headerlink" title="分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以"></a>分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以</h2></blockquote><hr><hr><hr><hr><hr><hr><ul><li>哈哈<sup>上标TM</sup></li><li>哈哈<sub>下标</sub><blockquote><p>自动创建链接<a href="mailto:&#x38;&#x35;&#x34;&#54;&#53;&#55;&#56;&#x38;&#64;&#113;&#x71;&#46;&#99;&#111;&#x6d;" target="_blank" rel="noopener">&#x38;&#x35;&#x34;&#54;&#53;&#55;&#56;&#x38;&#64;&#113;&#x71;&#46;&#99;&#111;&#x6d;</a></p></blockquote></li></ul><p>标注一[^5] 标注二[^3] and a definition[^qq].</p><p>[^5]: This is a footnote<br>[^3]: A footnote on “label”<br>[^qq]: The definition of a footnote.</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p><strong>加粗</strong>    <strong>加粗</strong><br><em>斜体</em>  _斜体_<br><strong><em>加粗+斜体</em></strong><br><strong><em>加粗+斜体</em></strong><br><del>删除文本</del></p><h3 id="图片和链接"><a href="#图片和链接" class="headerlink" title="图片和链接"></a>图片和链接</h3><p>图片与链接的语法很像，区别在一个 ! 号。二者格式：</p><blockquote></blockquote><pre><code>图片：![]() ![图片文本(可忽略)](图片地址)链接：[]()  [链接文本](链接地址)</code></pre><p>链接又分为行内式、参考式和自动链接</p><blockquote></blockquote><pre><code>行内式[blog](http://s85465788.github.io)参考式[blog][url]该url为链接标记，置于文中任意位置</code></pre><pre><code>自动链接：直接用&lt;&gt;括起来&lt;http://www.baidu.com&gt;</code></pre><p><a href="http://s85465788.github.io" target="_blank" rel="noopener">blog</a></p><p><a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></p><p>这是图片：<img src="http://pic1.sc.chinaz.com/files/pic/pic9/201803/zzpic10977.jpg" alt=""></p><p><img src="./01.png" alt="" title="描述"></p><h4 id="插入图片带有链接"><a href="#插入图片带有链接" class="headerlink" title="插入图片带有链接"></a>插入图片带有链接</h4><p><a href="http://www.baidu.com" target="_blank" rel="noopener"><img src="./01.png" alt="" title="百度"></a>  </p><p>[<img src="./01.png" alt="" title="百度">][5]<br>[5]: <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></p><h1 id="代码-代码块"><a href="#代码-代码块" class="headerlink" title="代码 代码块"></a>代码 代码块</h1><p>代码分为行内代码块和代码块</p><ul><li>行内：这是行内<code>document.getElementById</code>的例子    </li><li>代码块使用四个空格或<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">``` javascript</span><br><span class="line">var num = 0;</span><br><span class="line">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">    num+=i;</span><br><span class="line">&#125;</span><br><span class="line">console.log(num);</span><br></pre></td></tr></table></figure></li></ul><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>对齐格式</p><ol><li>居左:<code>:----</code></li><li>居中: <code>:----:</code>或<code>-----</code></li><li>居右: <code>----:</code>  <blockquote><ul><li>默认左对齐<br>:- 左对齐<br>-:右对齐<br>:-:居中<br>-表示列的宽度权重，比如如下，–、-，表示第一列的宽度是第二列的俩倍</li></ul></blockquote></li></ol><table><thead><tr><th style="text-align:left">左标题</th><th style="text-align:center">中间标题</th><th style="text-align:right">右标题</th></tr></thead><tbody><tr><td style="text-align:left">居左文本</td><td style="text-align:center">居中文本</td><td style="text-align:right">居右测文本</td></tr><tr><td style="text-align:left">居左文本1</td><td style="text-align:center">居中文本2</td><td style="text-align:right">居右文本3</td></tr></tbody></table><h1 id="支持css内嵌样式"><a href="#支持css内嵌样式" class="headerlink" title="支持css内嵌样式"></a>支持css内嵌样式</h1><p><strong>代码</strong></p><p style="color: #AD5D0F;font-size: 30px; font-family: '宋体';">内联样式</p><h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><p>注：一个$左对齐，两个居中</p><p>$$ x \href{why-equal.html}{=} y^2 + 1 $$<br>$ x = {-b \pm \sqrt{b^2-4ac} \over 2a}. $</p>]]></content>
      
      <categories>
          
          <category> 软件使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>九桥全同步</title>
      <link href="/2018/04/10/%E4%B9%9D%E6%A1%A5%E5%85%A8%E5%90%8C%E6%AD%A5/"/>
      <url>/2018/04/10/%E4%B9%9D%E6%A1%A5%E5%85%A8%E5%90%8C%E6%AD%A5/</url>
      <content type="html"><![CDATA[<p>dds用户修改web错误日志<br>mv msg.err msg.err20180412</p><p>巡检<br>df -h<br>vshms -p 进程运行状态<br>-m 用户状态<br>-c软件运行时间点<br>目标端只有-p -c<br>日志</p><p>web端<br>ds目录下<br>dds_pweb -q  退出<br>dds_pweb -s  打开源端<br>dds_pweb -t  打开目标端</p><p>正常关闭：（可以增量同步）<br>关源端ddstop  目标端ddstop<br>开源端ddstart 开目标端ddstart  </p><p>全同步：<br>关源端ddstop  目标端ddstop<br>源端ddclean  目标端ddclean<br>开源端ddstart 开目标端ddstart </p><p>map_start(开始全同步)<br>vs（源端实时日志）  vt（目标端实时日志） </p><p>源端    192.168.1.101<br>目标端  192.168.1.99</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> dds </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
